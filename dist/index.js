var a=Object.defineProperty;var o=(n,t)=>a(n,"name",{value:t,configurable:!0});import{R as u,A as s,g as h,s as p,a as l,D as g}from"./serial-WcrElEFO.js";import{I as A}from"./serial-WcrElEFO.js";import"@anthropic-ai/sdk";import"@google/genai";import"openai";import"serialize-error";import"fs/promises";import"glob";import"node:fs/promises";import"node:path";class d{static{o(this,"Axle")}provider;stats={in:0,out:0};variables={};recorder=new u;constructor(t){if(Object.entries(t).length!==1)throw new s("Must have exactly one config");try{const r=Object.keys(t)[0],e=t[r];this.provider=h(r,e)}catch(r){throw r instanceof s?r:new s("Failed to initialize provider",{code:"PROVIDER_INIT_ERROR",cause:r instanceof Error?r:new Error(String(r))})}}async execute(...t){try{let r;return r=await p(...t).execute({provider:this.provider,variables:this.variables,stats:this.stats,recorder:this.recorder}),r}catch(r){const e=r instanceof s?r:new s("Execution failed",{cause:r instanceof Error?r:new Error(String(r))});return this.recorder.error?.log(e),{response:null,error:e,success:!1}}}get logs(){return this.recorder.getLogs()}}class i extends l{static{o(this,"ChainOfThought")}constructor(t,r){super(t,r)}static with(t,r){return r?new i(t,r):new i(t,g)}compile(t,r={}){const e=this.getFinalUserPrompt(t,r),c=this.getFormatInstructions();return[e,`
Let's think step by step. Use <thinking></thinking> tags to show your reasoning and thought process.`,c].join(`
`)}finalize(t){const r=this.parseTaggedSections(t),e=super.finalize(t,r);if("thinking"in r.tags)e.thinking=r.tags.thinking;else throw new Error("Expected results with tag <thinking> but it does not exist");return e}}class m{static{o(this,"WriteOutputTask")}constructor(t){this.output=t}type}export{d as Axle,i as ChainOfThought,A as Instruct,m as WriteOutputTask};
