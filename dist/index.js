#!/usr/bin/env node
var H=Object.defineProperty;var i=(e,t)=>H(e,"name",{value:t,configurable:!0});import{Command as K}from"@commander-js/extra-typings";import{randomUUID as N}from"node:crypto";import b from"chalk";import X from"spinnies";import{access as O,mkdir as $,writeFile as R,appendFile as Y,readFile as h}from"node:fs/promises";import{glob as x}from"glob";import{resolve as E,dirname as z}from"node:path";import _ from"yaml";import Q from"@anthropic-ai/sdk";import Z from"openai";var p=(e=>(e[e.Stop=0]="Stop",e[e.Length=1]="Length",e[e.FunctionCall=2]="FunctionCall",e[e.Error=3]="Error",e))(p||{});class ee{static{i(this,"Chat")}system;messages=[];addSystem(t){this.system=t}addUser(t){this.messages.push({role:"user",content:t})}addAssistant(t){this.messages.push({role:"assistant",content:t})}toOpenAI(){return[{role:"system",content:this.system},...this.messages]}toAnthropic(){return{system:this.system,messages:this.messages}}toString(){return JSON.stringify({system:this.system,messages:this.messages})}}function I(e){return Array.isArray(e)?e:[e]}i(I,"arrayify");function y(e){return typeof e=="string"?e:JSON.stringify(e,null,2)}i(y,"stringify");function w(e){return e.slice(0,8)}i(w,"friendly");const C="./logs/";class te{static{i(this,"Writer")}time;constructor(t){this.time=t}get filename(){return`${C}${this.time}.log`}async setup(){try{await O(C)}catch{await $(C)}await R(this.filename,`AXLE: New run at ${this.time}
`)}async write(t){t=`${new Date().toISOString()}> ${t}
`,await Y(this.filename,t)}}class ne{static{i(this,"Logger")}instanceId=new Date().toISOString();spinnies=new X({color:"white",succeedColor:"white"});opts={debug:!1};writer=null;async initWriter(){this.writer=new te(new Date().toISOString()),await this.writer.setup()}setOptions(t){this.opts={debug:t.debug??!1}}get progress(){return{add:i((t,n)=>{this.spinnies.add(t,{text:n}),this.writer?.write(n)},"add"),update:i((t,n)=>{this.spinnies.update(t,{text:n}),this.writer?.write(n)},"update"),succeed:i((t,n)=>{this.spinnies.succeed(t,{text:n}),this.writer?.write(n)},"succeed"),fail:i((t,n)=>{this.spinnies.fail(t,{text:n}),this.writer?.write(n)},"fail")}}get info(){return{group(t){const n=y(t);console.log(`
${b.blue("==>")} ${b.whiteBright.bold(n)}`),this.writer?.write(n)},log:i(t=>{const n=y(t);console.log(y(t)),this.writer?.write(n)},"log")}}get debug(){const t=this.opts;return{group(n){const o=y(n);t.debug&&console.log(`
${b.gray("==>")} Debug: ${o}`),this.writer?.write(o)},log:i(n=>{const o=y(n);t.debug&&console.log(b.gray(o)),this.writer?.write(o)},"log")}}}const r=new ne;async function D(e,t){try{const n=await h(t.name,"utf-8");e=e.replace(t.pattern,n)}catch(n){console.error(n)}return e}i(D,"fileReplacer");async function T(e,t){try{const n=I(t.name);let o="";for(const s of n){const a=await x(s);r.debug.log(`many-files parser. For glob "${s}", found ${a.length} files.`);const l=await Promise.all(a.map(async u=>{const g=await h(u,"utf-8");return u+`:
`+g}));o+=l.join(`
`)}e=e.replace(t.pattern,o)}catch(n){console.error(n)}return e}i(T,"manyFilesReplacer");async function re(e){const{step:t,chat:n,provider:o,stats:s,variables:a,options:l}=e;let{content:u,system:g}=t;if(t.replace&&([u,g]=await oe(t.replace,a,t.content,t.system)),g&&n.addSystem(g),n.addUser(u),l.dryRun)return r.debug.log(n),{action:"continue"};const c=await o.createChatCompletionRequest(n).execute();if(s.in+=c.usage.in,s.out+=c.usage.out,c.type=="success")switch(c.reason){case p.Stop:return c.message.content&&(n.addAssistant(c.message.content),a.input=c.message.content),{action:"continue"};case p.Length:return{action:"error",error:new Error("AXIS: Incomplete model output due to `max_tokens` parameter or token limit")};case p.FunctionCall:return{action:"error",error:new Error("Function call is currently not supported")}}return{action:"error",error:new Error("Failed to get response from AI provider")}}i(re,"executeChatAction");async function oe(e,t,n,o){for(const s of e)switch(s.source){case"file":n=await D(n,s),o&&(o=await D(o,s));break;case"many-files":n=await T(n,s),o&&(o=await T(o,s));break;default:n=n.replace(s.pattern,t[s.name]),o&&(o=o.replace(s.pattern,t[s.name]))}return[n,o]}i(oe,"handleReplace");async function j(e,t,n="File"){let o=null,s="";if(e)try{s=E(e),o=await h(s,{encoding:"utf-8"})}catch{throw new Error(`${n} not found, see --help for details`)}else{for(const a of t.formats)try{s=E(t.name+"."+a),o=await h(s,{encoding:"utf-8"});break}catch{continue}if(o===null)throw new Error(`${n} not found, see --help for details`)}return{content:o,format:s.split(".").pop()??""}}i(j,"loadFile");function ie(e,t){e=e.replace("**/*","**");const n=/(?<asterisks>\*{1,2})(?<extension>\.[^\\/]+)?/,o=e.match(n);if(o){let s="";return o.groups?.asterisks.length==1?s+=t.fileNameStem:s+=t.directoryPath+t.fileNameStem,o.groups?.extension?s+=o.groups.extension:s+=t.fileExtension,e.replace(o[0],s)}return e}i(ie,"replaceFilePattern");function se(e){const t=/(?<name>[^\\/]+)(?<extension>\.[^\\/]+)$/,n=e.match(t);return n&&n.length>0&&n.groups?{absolutePath:e,directoryPath:e.replace(n[0],""),fileExtension:n.groups.extension,fileNameStem:n.groups.name,fullFileName:n[0]}:null}i(se,"pathToComponents");async function ae(e,t="."){try{return(await x(`${t}/${e}.*`)).length>0}catch{return!1}}i(ae,"fileExists");async function U(e){const t=z(e);try{await O(t)}catch{await $(t),await U(t)}}i(U,"ensureDirectoryExistence");async function ce(e,t){await U(e),await R(e,t)}i(ce,"writeFileWithDirectories");async function le(e){const{action:t,variables:n,options:o}=e;if(o.dryRun){r.debug.log("Dry run: no action was taken");return}const s=t.output,a=n.input;if(typeof a=="string"){const l=ie(s,n.file);await ce(l,a)}}i(le,"execWriteToDisk");function ue(e){const{action:t,variables:n,options:o}=e;if(o.dryRun){r.debug.log("Dry run: no action was taken");return}const s=n.input;typeof s=="string"&&(n[t.name]=s)}i(ue,"execSaveToVariables");const fe="ax.job",pe=["yaml","yml","json"];async function ge(e,t){const{content:n,format:o}=await j(e,{name:fe,formats:pe},"Job File");let s=null;if(o==="json")s=JSON.parse(n);else if(o==="yaml"||o==="yml")s=_.parse(n);else throw new Error("Invalid job file format");if(r.debug?.group("The Job Object"),r.debug?.log(s),de(s))return s;throw new Error("The job file is not valid")}i(ge,"getJob");function de(e){if(typeof e!="object")return r.debug.log("JobConfig: Not an object"),!1;if(!he(e.using))return r.debug.log("JobConfig: Invalid 'using' property"),!1;if(typeof e.jobs!="object")return r.debug.log("JobConfig: 'jobs' property is not an object"),!1;for(const t in e.jobs)if(!ye(e.jobs[t]))return r.debug.log(`JobConfig: Invalid job at key '${t}'`),!1;return!0}i(de,"isJobConfig");function he(e){return typeof e!="object"?(r.debug.log("Using: Not an object"),!1):typeof e.engine!="string"||e.engine!=="openai"&&e.engine!=="anthropic"?(r.debug.log("Using: Invalid 'engine' property"),!1):e.model!==void 0&&typeof e.model!="string"?(r.debug.log("Using: Invalid 'model' property"),!1):!0}i(he,"isUsing");function ye(e){return typeof e!="object"?(r.debug.log("Job: Not an object"),!1):me(e)||B(e)?!0:(r.debug.log("Job: Neither AgentJob nor BatchJob"),!1)}i(ye,"isJob");function me(e){if(typeof e!="object")return r.debug.log("AgentJob: Not an object"),!1;if(e.type!=="agent")return r.debug.log("AgentJob: Invalid 'type' property"),!1;if(!Array.isArray(e.steps))return r.debug.log("AgentJob: 'steps' is not an array"),!1;for(const t of e.steps)if(!L(t))return r.debug.log("AgentJob: Invalid step in 'steps' array"),!1;return!0}i(me,"isAgentJob");function be(e){return typeof e!="object"?(r.debug.log("SkipOptions: Not an object"),!1):typeof e.folder!="string"?(r.debug.log("SkipOptions: Invalid 'folder' property"),!1):typeof e.contains!="string"?(r.debug.log("SkipOptions: Invalid 'contains' property"),!1):!0}i(be,"isSkipOptions");function B(e){if(typeof e!="object")return r.debug.log("BatchJob: Not an object"),!1;if(e.type!=="batch")return r.debug.log("BatchJob: Invalid 'type' property"),!1;if(!Array.isArray(e.batch))return r.debug.log("BatchJob: 'batch' is not an array"),!1;for(const t of e.batch){if(typeof t!="object")return r.debug.log("BatchJob: Invalid batch item"),!1;if(t.type!=="files")return r.debug.log("BatchJob: Invalid batch item type"),!1;if(typeof t.input!="string")return r.debug.log("BatchJob: Invalid 'input' property in batch item"),!1;if(t["skip-condition"]!==void 0){if(!Array.isArray(t["skip-condition"]))return r.debug.log("BatchJob: 'skip-condition' is not an array"),!1;for(const n of t["skip-condition"])if(!be(n))return r.debug.log("BatchJob: Invalid skip option in 'skip-condition'"),!1}}if(!Array.isArray(e.steps))return r.debug.log("BatchJob: 'steps' is not an array"),!1;for(const t of e.steps)if(!L(t))return r.debug.log("BatchJob: Invalid step in 'steps' array"),!1;return!0}i(B,"isBatchJob");function L(e){return typeof e!="object"?(r.debug.log("Step: Not an object"),!1):M(e)||q(e)||P(e)?!0:(r.debug.log("Step: Not a valid Step type"),!1)}i(L,"isStep");function M(e){if(typeof e!="object")return r.debug.log("ChatAction: Not an object"),!1;if(e.action!=="chat")return r.debug.log("ChatAction: Invalid 'action' property"),!1;if(e.system!==void 0&&typeof e.system!="string")return r.debug.log("ChatAction: Invalid 'system' property"),!1;if(typeof e.content!="string")return r.debug.log("ChatAction: Invalid 'content' property"),!1;if(e.replace!==void 0){if(!Array.isArray(e.replace))return r.debug.log("ChatAction: 'replace' is not an array"),!1;for(const t of e.replace)if(!we(t))return r.debug.log("ChatAction: Invalid replace in 'replace' array"),!1}return!0}i(M,"isChatAction");function q(e){return typeof e!="object"?(r.debug.log("WriteToDiskAction: Not an object"),!1):e.action!=="write-to-disk"?(r.debug.log("WriteToDiskAction: Invalid 'action' property"),!1):typeof e.output!="string"?(r.debug.log("WriteToDiskAction: Invalid 'output' property"),!1):!0}i(q,"isWriteToDiskAction");function P(e){return typeof e!="object"?(r.debug.log("SaveVarAction: Not an object"),!1):e.action!=="save-to-variables"?(r.debug.log("SaveVarAction: Invalid 'action' property"),!1):typeof e.name!="string"?(r.debug.log("SaveVarAction: Invalid 'name' property"),!1):!0}i(P,"isSaveVarAction");function we(e){return typeof e!="object"?(r.debug.log("Replace: Not an object"),!1):ke(e)||ve(e)||Ae(e)?!0:(r.debug.log("Replace: Not a valid Replace type"),!1)}i(we,"isReplace");function Ae(e){return typeof e!="object"?(r.debug.log("ReplaceVariables: Not an object"),!1):typeof e.pattern!="string"?(r.debug.log("ReplaceVariables: Invalid 'pattern' property"),!1):e.source!==void 0&&e.source!=="variables"?(r.debug.log("ReplaceVariables: Invalid 'source' property"),!1):typeof e.name!="string"?(r.debug.log("ReplaceVariables: Invalid 'name' property"),!1):!0}i(Ae,"isReplaceVariables");function ve(e){return typeof e!="object"?(r.debug.log("ReplaceFile: Not an object"),!1):typeof e.pattern!="string"?(r.debug.log("ReplaceFile: Invalid 'pattern' property"),!1):e.source!=="file"?(r.debug.log("ReplaceFile: Invalid 'source' property"),!1):typeof e.name!="string"?(r.debug.log("ReplaceFile: Invalid 'name' property"),!1):!0}i(ve,"isReplaceFile");function ke(e){return typeof e!="object"?(r.debug.log("ReplaceManyFiles: Not an object"),!1):typeof e.pattern!="string"?(r.debug.log("ReplaceManyFiles: Invalid 'pattern' property"),!1):e.source!=="many-files"?(r.debug.log("ReplaceManyFiles: Invalid 'source' property"),!1):typeof e.name!="string"&&!Array.isArray(e.name)?(r.debug.log("ReplaceManyFiles: Invalid 'name' property"),!1):!0}i(ke,"isReplaceManyFiles");async function W(e,t){return new xe(e,t)}i(W,"getAgentCommand");class xe{static{i(this,"AgentJob")}type="agent";id;job;provider;constructor(t,n){this.id=N(),this.job=t,this.provider=n}async execute(t,n,o){const{job:s,provider:a}=this,{steps:l}=s;r.progress.add(this.id,`[${w(this.id)}] Starting job`);const u=new ee;let g=!1;for(const[d,c]of l.entries())if(r.progress.update(this.id,`[${w(this.id)}] Processing step ${d+1}: ${c.action}`),M(c)){const{action:J,error:m}=await re({step:c,chat:u,provider:a,stats:o,variables:t,options:n});m&&(g=!0,console.error(m))}else P(c)?ue({action:c,variables:t,options:n}):q(c)&&await le({action:c,variables:t,options:n});g?r.progress.fail(this.id,`[${w(this.id)}] Failed`):r.progress.succeed(this.id,`[${w(this.id)}] complete`)}}async function Ie(e,t){const n=new Ce(e,t);return await n.setup(),n}i(Ie,"getBatchCommand");class Ce{static{i(this,"BatchCommand")}id;job;provider;runs=[];constructor(t,n){this.id=N(),this.job=t,this.provider=n}async setup(){if(!this.job.batch)throw new Error("Batch job is missing batch field");const t=I(this.job.batch);for(const n of t)if(n.type==="files"){const o=n.input,s=await x(o,{withFileTypes:!0});for(const a of s){const l=a.fullpath(),u=se(l);if(!await Se(n["skip-condition"],u)){const c={variables:{content:await h(l,"utf-8"),file:u},job:this.job};this.runs.push(c)}}}}async execute(t,n,o){const s=[],a=[];if(this.runs.length==0)return Promise.resolve("No runs to execute.").then(()=>{r.info.log("No runs to execute")});let l=0;r.progress.add(this.id,`Working on 0/${this.runs.length}`);for(let u=0;u<this.runs.length;u++){const g=this.runs[u],d=new Promise(async(c,J)=>{const m=await W(g.job,this.provider);try{await m.execute({...g.variables,...t},n,o),c()}catch(G){console.error(G),J()}finally{l+=1,r.progress.add(this.id,`Working on ${l}/${this.runs.length}`)}});s.push(d),a.push(d),a.length>=5&&(await Promise.all(a),a.length=0)}return Promise.all(s).then(()=>{r.progress.succeed(this.id,`All jobs (${this.runs.length}) completed`)})}}async function Se(e,t){if(e){let n=I(e);for(const o of n)if(o.folder&&o.contains&&o.contains==="fileNameStem"&&t)return await ae(t.fileNameStem,o.folder)}return!1}i(Se,"processSkipRules");class Fe{static{i(this,"AnthropicProvider")}name="Anthropic";client;model;constructor(t,n){this.model=t??"claude-3-5-sonnet-20240620",this.client=new Q({apiKey:n.providers.anthropic["api-key"]})}createChatCompletionRequest(t){return new Je(this.client,this.model,t)}}class Je{static{i(this,"AnthropicChatRequest")}chat;client;model;constructor(t,n,o){this.client=t,this.model=n,this.chat=o}async execute(){const t={model:this.model,...this.chat.toAnthropic(),max_tokens:Ne(this.model)};r.debug.log(t);let n;try{const o=await this.client.messages.create(t);n=$e(o)}catch(o){n={type:"error",error:{type:o.type??"Undetermined",message:o.message??"Unexpected error from Anthropic"},usage:{in:0,out:0},raw:o}}return r.debug.log(n),n}}function Ne(e){switch(e){case"claude-3-5-sonnet-20240620":return 4096;case"claude-3-opus-20240229":return 4096;case"claude-3-sonnet-20240229":return 4096;case"claude-3-haiku-20240307":return 4096;default:return 4096}}i(Ne,"getMaxTokens");function Oe(e){switch(e){case"max_tokens":return p.Length;case"end_turn":return p.Stop;case"stop_sequence":return p.Stop;case"tool_use":return p.FunctionCall;default:return p.Error}}i(Oe,"getStopReason$1");function $e(e){if(e.type=="message"){const t=e.content[0];if(t.type=="text"&&e.stop_reason)return{type:"success",id:e.id,model:e.model,reason:Oe(e.stop_reason),message:{role:e.role,content:t.text},usage:{in:e.usage.input_tokens,out:e.usage.output_tokens},raw:e}}return{type:"error",error:{type:"undetermined",message:"Unexpected response from Anthropic"},usage:{in:e.usage.input_tokens,out:e.usage.output_tokens},raw:e}}i($e,"translate$1");class Re{static{i(this,"OpenAIProvider")}name="OpenAI";client;model;constructor(t,n,o){this.model=t,this.client=new Z({apiKey:n.providers.openai["api-key"]})}createChatCompletionRequest(t){return new Ee(this.client,this.model,t)}}class Ee{static{i(this,"OpenAIRequest")}chat;openai;model;constructor(t,n,o){this.openai=t,this.model=n||"gpt-4o",this.chat=o}async execute(){const t={model:this.model,messages:this.chat.toOpenAI()};r.debug.log(t);let n;try{const o=await this.openai.chat.completions.create(t);n=De(o)}catch(o){n={type:"error",error:{type:o.type??"Undetermined",message:o.message??"Unexpected error from OpenAI"},usage:{in:0,out:0},raw:o}}return r.debug.log(n),n}}function _e(e){switch(e){case"length":return p.Length;case"stop":return p.Stop;case"function_call":return p.FunctionCall;default:return p.Error}}i(_e,"getStopReason");function De(e){if(e.choices.length>0){const t=e.choices[0];return{type:"success",id:e.id,model:e.model,reason:_e(t.finish_reason),message:{content:t.message.content??"",role:t.message.role},usage:{in:e.usage?.prompt_tokens??0,out:e.usage?.completion_tokens??0},raw:e}}return{type:"error",error:{type:"undetermined",message:"Unexpected response from OpenAI"},usage:{in:e.usage?.prompt_tokens??0,out:e.usage?.completion_tokens??0},raw:e}}i(De,"translate");function Te(e,t,n){return e.engine=="openai"?new Re(e.model,t,n):e.engine=="anthropic"?new Fe(e.model,t):null}i(Te,"getEngine");const je="ax.config",Ue=["yaml","yml","json"];async function Be(e,t){const{content:n,format:o}=await j(e,{name:je,formats:Ue},"Config File");let s=null;if(o==="json")s=JSON.parse(n);else if(o==="yaml"||o==="yml")s=_.parse(n);else throw new Error("Invalid config file format");if(r.debug.group("The Config Object"),r.debug.log(s),Le(s))return s;throw new Error("The config file is not valid")}i(Be,"getConfig");function Le(e){return e&&typeof e=="object"&&"providers"in e&&typeof e.providers=="object"&&Object.keys(e.providers).length>0&&Object.entries(e.providers).every(([t,n])=>typeof t=="string"&&n&&typeof n=="object"&&"api-key"in n&&typeof n["api-key"]=="string"&&(!("model"in n)||typeof n.model=="string"))}i(Le,"isConfig");const A=new K().name("axle").description("A CLI tool for running AI jobs").version("1.0.0").option("--dry-run","Run the application without executing against the AI providers").option("-c, --config <path>","Path to the config file").option("-j, --job <path>","Path to the job file").option("--no-log","Do not write the output to a log file").option("-d, --debug","Print additional debug information").option("--args <args...>","Additional arguments in the form key=value");A.parse(process.argv);const f=A.opts(),v={};f.args&&f.args.forEach(e=>{const[t,n]=e.split("=");t&&n&&(v[t.trim()]=n.trim())}),r.setOptions(f),f.log&&await r.initWriter(),f.debug&&(r.debug?.group("Options"),r.debug?.log(f),r.debug?.log("Additional Arguments:"),r.debug?.log(v));let V,S;try{V=await Be(f.config??null,f),S=await ge(f.job??null,f)}catch(e){r.debug?.log(e.stack),console.error(`${e.stack}`),A.outputHelp(),process.exit(1)}const F=Te(S.using,V,f);F||(console.error("AI Provider is not valid. Please check your job file."),A.outputHelp(),process.exit(1)),r.info.group("All systems operational. Running job...");const Me=Date.now();f.dryRun&&r.info.log("Dry run mode enabled. No API calls will be made.");const k={in:0,out:0};for(const[e,t]of Object.entries(S.jobs))r.info.group(`Executing "${e}"`),B(t)?await(await Ie(t,F)).execute(v,f,k):await(await W(t,F)).execute(v,f,k);r.info.group("Usage"),r.info.log(`Total run time: ${Date.now()-Me}ms`),r.info.log(`Input tokens: ${k.in} `),r.info.log(`Output tokens: ${k.out} `),r.info.group("Complete. Goodbye");
