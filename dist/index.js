#!/usr/bin/env node
var re=Object.defineProperty;var s=(e,t)=>re(e,"name",{value:t,configurable:!0});import{Command as ne}from"@commander-js/extra-typings";import{randomUUID as P}from"node:crypto";import A from"chalk";import ie from"spinnies";import{access as B,mkdir as U,writeFile as M,appendFile as se,readFile as w}from"node:fs/promises";import q from"yaml";import{glob as x}from"glob";import{resolve as j,dirname as ae}from"node:path";import le from"@anthropic-ai/sdk";import ce from"openai";var p=(e=>(e[e.Stop=0]="Stop",e[e.Length=1]="Length",e[e.FunctionCall=2]="FunctionCall",e[e.Error=3]="Error",e))(p||{});class ue{static{s(this,"Chat")}system;messages=[];tools=[];setToolSchemas(t){this.tools=t}addSystem(t){this.system=t}addUser(t){this.messages.push({role:"user",content:t})}addAssistant(t,o){this.messages.push({role:"assistant",content:t,toolCalls:o})}addTools(t){this.messages.push({role:"tool",content:t})}toOpenAI(){const t=[];this.system&&t.push({role:"system",content:this.system});const o=this.tools.length>0?this.tools.map(i=>({type:"function",function:i})):void 0,n=this.messages.map(i=>{switch(i.role){case"tool":return i.content.map(a=>({role:"tool",tool_call_id:a.id,content:a.content}));case"assistant":return{role:i.role,content:i.content,tool_calls:i.toolCalls.map(a=>({id:a.id,type:"function",function:{name:a.name,arguments:JSON.stringify(a.arguments)}}))};default:return{role:i.role,content:i.content}}}).flat(1/0);return{messages:[...t,...n],...o&&{tools:o}}}toAnthropic(){const t=this.messages.map(n=>{switch(n.role){case"assistant":const i=[];return i.push({type:"text",text:n.content}),n.toolCalls&&i.push(...n.toolCalls.map(a=>({type:"tool_use",id:a.id,name:a.name,input:a.arguments}))),{role:"assistant",content:i};case"tool":return{role:"user",content:n.content.map(a=>({type:"tool_result",tool_use_id:a.id,content:a.content}))};default:return{role:"user",content:n.content}}}),o=this.tools.map(n=>({name:n.name,description:n.description,input_schema:n.parameters}));return{system:this.system,messages:t,tools:o}}toString(){return JSON.stringify({system:this.system,messages:this.messages,tools:this.tools})}}function O(e){return Array.isArray(e)?e:[e]}s(O,"arrayify");function v(e){return typeof e=="string"?e:JSON.stringify(e,null,2)}s(v,"stringify");function C(e){return e.slice(0,8)}s(C,"friendly");function fe(e){return new Promise(t=>setTimeout(t,e))}s(fe,"delay");const R="./logs/";class ge{static{s(this,"Writer")}time;constructor(t){this.time=t}get filename(){return`${R}${this.time}.log`}async setup(){try{await B(R)}catch{await U(R)}await M(this.filename,`AXLE: New run at ${this.time}
`)}async write(t){t=`${new Date().toISOString()}> ${t}
`,await se(this.filename,t)}}class pe{static{s(this,"Logger")}instanceId=new Date().toISOString();spinnies=new ie({color:"white",succeedColor:"white"});opts={debug:!1};writer=null;async initWriter(){this.writer=new ge(new Date().toISOString()),await this.writer.setup()}setOptions(t){this.opts={debug:t.debug??!1}}get progress(){return{add:s((t,o)=>{this.spinnies.add(t,{text:o}),this.writer?.write(o)},"add"),update:s((t,o)=>{this.spinnies.update(t,{text:o}),this.writer?.write(o)},"update"),succeed:s((t,o)=>{this.spinnies.succeed(t,{text:o}),this.writer?.write(o)},"succeed"),fail:s((t,o)=>{this.spinnies.fail(t,{text:o}),this.writer?.write(o)},"fail")}}get info(){return{group(t){const o=v(t);console.log(`
${A.blue("==>")} ${A.whiteBright.bold(o)}`),this.writer?.write(o)},log:s(t=>{const o=v(t);console.log(v(t)),this.writer?.write(o)},"log")}}get debug(){const t=this.opts;return{group(o){const n=v(o);t.debug&&console.log(`
${A.gray("==>")} Debug: ${n}`),this.writer?.write(n)},log:s(o=>{const n=v(o);t.debug&&console.log(A.gray(n)),this.writer?.write(n)},"log")}}}const r=new pe;async function L(e,t,o="File"){let n=null,i="";if(e)try{i=j(e),n=await w(i,{encoding:"utf-8"})}catch{throw new Error(`${o} not found, see --help for details`)}else{for(const a of t.formats)try{i=j(t.name+"."+a),n=await w(i,{encoding:"utf-8"});break}catch{continue}if(n===null)throw new Error(`${o} not found, see --help for details`)}return{content:n,format:i.split(".").pop()??""}}s(L,"loadFile");function de(e,t){e=e.replace("**/*","**");const o=/(?<asterisks>\*{1,2})(?<extension>\.[^\\/]+)?/,n=e.match(o);if(n){let i="";return n.groups?.asterisks.length==1?i+=t.fileNameStem:i+=t.directoryPath+t.fileNameStem,n.groups?.extension?i+=n.groups.extension:i+=t.fileExtension,e.replace(n[0],i)}return e}s(de,"replaceFilePattern");function he(e){const t=/(?<name>[^\\/]+)(?<extension>\.[^\\/]+)$/,o=e.match(t);return o&&o.length>0&&o.groups?{absolutePath:e,directoryPath:e.replace(o[0],""),fileExtension:o.groups.extension,fileNameStem:o.groups.name,fullFileName:o[0]}:null}s(he,"pathToComponents");async function ye(e,t="."){try{return(await x(`${t}/${e}.*`)).length>0}catch{return!1}}s(ye,"fileExists");async function V(e){const t=ae(e);try{await B(t)}catch{await U(t),await V(t)}}s(V,"ensureDirectoryExistence");async function me(e,t){await V(e),await M(e,t)}s(me,"writeFileWithDirectories");const be="ax.job",we=["yaml","yml","json"];async function ve(e,t){const{content:o,format:n}=await L(e,{name:be,formats:we},"Job File");let i=null;if(n==="json")i=JSON.parse(o);else if(n==="yaml"||n==="yml")i=q.parse(o);else throw new Error("Invalid job file format");if(r.debug?.group("The Job Object"),r.debug?.log(i),ke(i))return i;throw new Error("The job file is not valid")}s(ve,"getJob");function ke(e){if(r.debug.log("Checking if object is JobConfig"),typeof e!="object")return r.debug.log("JobConfig: Not an object"),!1;if(!Ae(e.using))return r.debug.log("JobConfig: Invalid 'using' property"),!1;if(typeof e.jobs!="object")return r.debug.log("JobConfig: 'jobs' property is not an object"),!1;for(const t in e.jobs)if(!Ce(e.jobs[t]))return r.debug.log(`JobConfig: Invalid job at key '${t}'`),!1;return!0}s(ke,"isJobConfig");function Ae(e){return r.debug.log("Checking if object is Using"),typeof e!="object"?(r.debug.log("Using: Not an object"),!1):typeof e.engine!="string"?(r.debug.log("Using: Invalid 'engine' property"),!1):e.engine==="openai"||e.engine==="anthropic"?e.model!==void 0&&typeof e.model!="string"?(r.debug.log("Using: Invalid 'model' property"),!1):!0:e.engine==="ollama"?typeof e.model!="string"?(r.debug.log("Using: For ollama engine, 'model' is required and must be a string"),!1):e.url!==void 0&&typeof e.url!="string"?(r.debug.log("Using: Invalid 'url' property"),!1):!0:(r.debug.log("Using: Unsupported engine type"),!1)}s(Ae,"isUsing");function Ce(e){return r.debug.log("Checking if object is Job"),typeof e!="object"?(r.debug.log("Job: Not an object"),!1):Ie(e)||W(e)?!0:(r.debug.log("Job: Neither AgentJob nor BatchJob"),!1)}s(Ce,"isJob");function Ie(e){if(r.debug.log("Checking if object is AgentJob"),typeof e!="object")return r.debug.log("AgentJob: Not an object"),!1;if(e.type!=="agent")return r.debug.log("AgentJob: Invalid 'type' property"),!1;if(!Array.isArray(e.steps))return r.debug.log("AgentJob: 'steps' is not an array"),!1;for(const t of e.steps)if(!G(t))return r.debug.log("AgentJob: Invalid step in 'steps' array"),!1;return!0}s(Ie,"isAgentJob");function Se(e){return r.debug.log("Checking if object is SkipOptions"),typeof e!="object"?(r.debug.log("SkipOptions: Not an object"),!1):typeof e.folder!="string"?(r.debug.log("SkipOptions: Invalid 'folder' property"),!1):typeof e.contains!="string"?(r.debug.log("SkipOptions: Invalid 'contains' property"),!1):!0}s(Se,"isSkipOptions");function W(e){if(r.debug.log("Checking if object is BatchJob"),typeof e!="object")return r.debug.log("BatchJob: Not an object"),!1;if(e.type!=="batch")return r.debug.log("BatchJob: Invalid 'type' property"),!1;if(!Array.isArray(e.batch))return r.debug.log("BatchJob: 'batch' is not an array"),!1;for(const t of e.batch){if(typeof t!="object")return r.debug.log("BatchJob: Invalid batch item"),!1;if(t.type!=="files")return r.debug.log("BatchJob: Invalid batch item type"),!1;if(typeof t.input!="string")return r.debug.log("BatchJob: Invalid 'input' property in batch item"),!1;if(t["skip-condition"]!==void 0){if(!Array.isArray(t["skip-condition"]))return r.debug.log("BatchJob: 'skip-condition' is not an array"),!1;for(const o of t["skip-condition"])if(!Se(o))return r.debug.log("BatchJob: Invalid skip option in 'skip-condition'"),!1}}if(!Array.isArray(e.steps))return r.debug.log("BatchJob: 'steps' is not an array"),!1;for(const t of e.steps)if(!G(t))return r.debug.log("BatchJob: Invalid step in 'steps' array"),!1;return!0}s(W,"isBatchJob");function G(e){return r.debug.log("Checking if object is Step"),typeof e!="object"?(r.debug.log("Step: Not an object"),!1):N(e)||H(e)||J(e)||K(e)||X(e)?!0:(r.debug.log("Step: Not a valid Step type"),!1)}s(G,"isStep");function N(e){if(r.debug.log("Checking if object is ChatAction"),typeof e!="object")return r.debug.log("ChatAction: Not an object"),!1;if(e.action!=="chat")return r.debug.log("ChatAction: Invalid 'action' property"),!1;if(e.system!==void 0&&typeof e.system!="string")return r.debug.log("ChatAction: Invalid 'system' property"),!1;if(typeof e.content!="string")return r.debug.log("ChatAction: Invalid 'content' property"),!1;if(e.replace!==void 0){if(!Array.isArray(e.replace))return r.debug.log("ChatAction: 'replace' is not an array"),!1;for(const t of e.replace)if(!Te(t))return r.debug.log("ChatAction: Invalid replace in 'replace' array"),!1}return!0}s(N,"isChatAction");function H(e){return r.debug.log("Checking if object is ToolAction"),typeof e!="object"?(r.debug.log("ToolAction: Not an object"),!1):e.action!=="tool-call"?(r.debug.log("ToolAction: Invalid 'action' property"),!1):Array.isArray(e.toolCalls)?!0:(r.debug.log("ToolAction: 'toolCalls' is not an array"),!1)}s(H,"isToolAction");function J(e){return r.debug.log("Checking if object is ToolRespondAction"),typeof e!="object"?(r.debug.log("ToolRespondAction: Not an object"),!1):e.action!=="tool-respond"?(r.debug.log("ToolRespondAction: Invalid 'action' property"),!1):Array.isArray(e.toolCalls)?!0:(r.debug.log("ToolRespondAction: 'toolCalls' is not an array"),!1)}s(J,"isToolRespondAction");function K(e){return r.debug.log("Checking if object is WriteToDiskAction"),typeof e!="object"?(r.debug.log("WriteToDiskAction: Not an object"),!1):e.action!=="write-to-disk"?(r.debug.log("WriteToDiskAction: Invalid 'action' property"),!1):typeof e.output!="string"?(r.debug.log("WriteToDiskAction: Invalid 'output' property"),!1):!0}s(K,"isWriteToDiskAction");function X(e){return r.debug.log("Checking if object is SaveVarAction"),typeof e!="object"?(r.debug.log("SaveVarAction: Not an object"),!1):e.action!=="save-to-variables"?(r.debug.log("SaveVarAction: Invalid 'action' property"),!1):typeof e.name!="string"?(r.debug.log("SaveVarAction: Invalid 'name' property"),!1):!0}s(X,"isSaveVarAction");function Te(e){return r.debug.log("Checking if object is Replace"),typeof e!="object"?(r.debug.log("Replace: Not an object"),!1):Re(e)||Oe(e)||xe(e)?!0:(r.debug.log("Replace: Not a valid Replace type"),!1)}s(Te,"isReplace");function xe(e){return r.debug.log("Checking if object is ReplaceVariables"),typeof e!="object"?(r.debug.log("ReplaceVariables: Not an object"),!1):typeof e.pattern!="string"?(r.debug.log("ReplaceVariables: Invalid 'pattern' property"),!1):e.source!==void 0&&e.source!=="variables"?(r.debug.log("ReplaceVariables: Invalid 'source' property"),!1):typeof e.name!="string"?(r.debug.log("ReplaceVariables: Invalid 'name' property"),!1):!0}s(xe,"isReplaceVariables");function Oe(e){return r.debug.log("Checking if object is ReplaceFile"),typeof e!="object"?(r.debug.log("ReplaceFile: Not an object"),!1):typeof e.pattern!="string"?(r.debug.log("ReplaceFile: Invalid 'pattern' property"),!1):e.source!=="file"?(r.debug.log("ReplaceFile: Invalid 'source' property"),!1):typeof e.name!="string"?(r.debug.log("ReplaceFile: Invalid 'name' property"),!1):!0}s(Oe,"isReplaceFile");function Re(e){return r.debug.log("Checking if object is ReplaceManyFiles"),typeof e!="object"?(r.debug.log("ReplaceManyFiles: Not an object"),!1):typeof e.pattern!="string"?(r.debug.log("ReplaceManyFiles: Invalid 'pattern' property"),!1):e.source!=="many-files"?(r.debug.log("ReplaceManyFiles: Invalid 'source' property"),!1):typeof e.name!="string"&&!Array.isArray(e.name)?(r.debug.log("ReplaceManyFiles: Invalid 'name' property"),!1):!0}s(Re,"isReplaceManyFiles");async function z(e,t){try{const o=await w(t.name,"utf-8");e=e.replace(t.pattern,o)}catch(o){console.error(o)}return e}s(z,"fileReplacer");async function Y(e,t){try{const o=O(t.name);let n="";for(const i of o){const a=await x(i);r.debug.log(`many-files parser. For glob "${i}", found ${a.length} files.`);const c=await Promise.all(a.map(async u=>{const l=await w(u,"utf-8");return u+`:
`+l}));n+=c.join(`
`)}e=e.replace(t.pattern,n)}catch(o){console.error(o)}return e}s(Y,"manyFilesReplacer");function Ne(e,t){for(const[o,n]of Object.entries(t))e=e.replace(/\$\{(.*?)\}/g,(i,a)=>t[a]||"");return e}s(Ne,"replaceVariables");async function Je(e){const{step:t,chat:o,provider:n,stats:i,variables:a,options:c}=e;if(N(t)){let{content:g,system:d}=t;t.replace&&([g,d]=await $e(t.replace,a,t.content,t.system)),d&&o.addSystem(d),o.addUser(g)}else if(J(t)){const d=a.input.map(y=>({id:y.id,content:JSON.stringify(y.results)}));o.addTools(d)}if(c.dryRun)return r.debug.log(o),{action:"continue"};const l=await n.createChatCompletionRequest(o).execute();if(i.in+=l.usage.in,i.out+=l.usage.out,l.type==="success")switch(l.reason){case p.Stop:return l.message.content&&(o.addAssistant(l.message.content),a.input=l.message.content),{action:"continue"};case p.Length:return{action:"error",error:new Error("Incomplete model output due to `max_tokens` parameter or token limit")};case p.FunctionCall:{let g=l.message;return l.message.content&&(o.addAssistant(g.content,g.toolCalls),a.input=l.message.content),{action:"toolCall",toolCalls:g.toolCalls}}}if(r.debug.log(l),l.type==="error")return{action:"error",error:new Error(l.error.message)}}s(Je,"executeChatAction");async function $e(e,t,o,n){for(const i of e)switch(i.source){case"file":o=await z(o,i),n&&(n=await z(n,i));break;case"many-files":o=await Y(o,i),n&&(n=await Y(n,i));break;default:o=o.replace(i.pattern,t[i.name]),n&&(n=n.replace(i.pattern,t[i.name]))}return[o,n]}s($e,"handleReplace");async function Fe(e){const{action:t,variables:o,options:n}=e;if(n.dryRun){r.debug.log("Dry run: no action was taken");return}const i=t.output,a=o.input;if(typeof a=="string"){let c="";i.includes("*")?c=de(i,o.file):c=Ne(i,o),await me(c,a)}}s(Fe,"execWriteToDisk");function _e(e){const{action:t,variables:o,options:n}=e;if(n.dryRun){r.debug.log("Dry run: no action was taken");return}const i=o.input;typeof i=="string"&&(o[t.name]=i)}s(_e,"execSaveToVariables");async function Ee(e){const{step:t,toolManager:o,variables:n}=e,i=t.toolCalls,a=[];for(const u of i)a.push(new Promise((l,g)=>{const d=o.tools[u.name];if(!d){g(`Tool not found: ${u.name}`);return}d(u.arguments).then(y=>l({id:u.id,results:y})).catch(g)}));const c=await Promise.all(a);n.input=c,r.debug.log(c)}s(Ee,"executeToolAction");class De{static{s(this,"DynamicArrayIterator")}array;index=0;constructor(t){this.array=[...t]}*[Symbol.iterator](){for(;this.index<this.array.length;)yield[this.index,this.array[this.index]],this.index++}addItem(t){this.array.splice(this.index+1,0,t)}get length(){return this.array.length}}async function Q(e,t,o,n,i,a){const c=P(),{steps:u}=e;r.progress.add(c,`[${C(c)}] Starting job`);const l=new ue;if(e.tools){const y=o.getSchemas(e.tools);l.setToolSchemas(y)}if(e.variables)for(const[y,f]of Object.entries(e.variables))n[y]=f;let g=!1;const d=new De(u);for(const[y,f]of d)if(r.progress.update(c,`[${C(c)}] Processing step ${y+1}: ${f.action}`),N(f)||J(f)){const{action:m,error:k,toolCalls:b}=await Je({step:f,chat:l,provider:t,stats:a,variables:n,options:i});k&&(g=!0,console.error(k)),m=="toolCall"&&b&&(d.addItem({action:"tool-respond",toolCalls:b}),d.addItem({action:"tool-call",toolCalls:b}))}else if(H(f))try{await Ee({step:f,toolManager:o,variables:n,options:i})}catch(m){g=!0,console.error(m)}else X(f)?_e({action:f,variables:n,options:i}):K(f)&&await Fe({action:f,variables:n,options:i});g?r.progress.fail(c,`[${C(c)}] Failed`):r.progress.succeed(c,`[${C(c)}] completed ${d.length} steps`)}s(Q,"executeAgentCommand");async function Pe(e,t,o,n,i,a){const c=P(),u=[];if(!e.batch)throw new Error("Batch job is missing batch field");const l=O(e.batch);for(const f of l)if(f.type==="files"){const m=f.input,k=await x(m,{withFileTypes:!0});for(const b of k){const E=b.fullpath(),D=he(E);if(!await Be(f["skip-condition"],D)){const oe={variables:{content:await w(E,"utf-8"),file:D},job:e};u.push(oe)}}}if(u.length===0){r.info.log("No runs to execute");return}let g=0;r.progress.add(c,`Working on 0/${u.length}`);const d=s(async f=>{try{await Q(f.job,t,o,{...f.variables,...n},i,a)}catch(m){console.error(m)}finally{g++,r.progress.add(c,`Working on ${g}/${u.length}`)}},"executeRun"),y=5;for(let f=0;f<u.length;f+=y){const m=u.slice(f,f+y);await Promise.all(m.map(d))}r.progress.succeed(c,`All jobs (${u.length}) completed`)}s(Pe,"executeBatchCommand");async function Be(e,t){if(e){let o=O(e);for(const n of o)if(n.folder&&n.contains&&n.contains==="fileNameStem"&&t)return await ye(t.fileNameStem,n.folder)}return!1}s(Be,"processSkipRules");class Ue{static{s(this,"AnthropicProvider")}name="Anthropic";client;model;constructor(t,o){this.model=t??"claude-3-5-sonnet-20240620",this.client=new le({apiKey:o.providers.anthropic["api-key"]})}createChatCompletionRequest(t){return new Me(this.client,this.model,t)}}class Me{static{s(this,"AnthropicChatRequest")}chat;client;model;constructor(t,o,n){this.client=t,this.model=o,this.chat=n}async execute(){const t={model:this.model,...this.chat.toAnthropic(),max_tokens:qe(this.model)};r.debug.log(t);let o;try{const n=await this.client.messages.create(t);o=je(n)}catch(n){o={type:"error",error:{type:n.error.error.type??"Undetermined",message:n.error.error.message??"Unexpected error from Anthropic"},usage:{in:0,out:0},raw:n}}return r.debug.log(o),o}}function qe(e){switch(e){case"claude-3-5-sonnet-20240620":return 4096;case"claude-3-opus-20240229":return 4096;case"claude-3-sonnet-20240229":return 4096;case"claude-3-haiku-20240307":return 4096;default:return 4096}}s(qe,"getMaxTokens");function Z(e){switch(e){case"max_tokens":return p.Length;case"end_turn":return p.Stop;case"stop_sequence":return p.Stop;case"tool_use":return p.FunctionCall;default:return p.Error}}s(Z,"getStopReason$1");function je(e){const t=Z(e.stop_reason);if(t===p.Error)return{type:"error",error:{type:"Uncaught error",message:"Stop reason is not recognized."},usage:{in:e.usage.input_tokens,out:e.usage.output_tokens},raw:e};if(t===p.FunctionCall){const o=e.content[0],n=o.type==="text"?o.text:"",i=e.content.slice(1).map(a=>{if(a.type==="tool_use")return{id:a.id,name:a.name,arguments:a.input}}).filter(a=>a!==null);return{type:"success",id:e.id,model:e.model,reason:p.FunctionCall,message:{role:e.role,content:n,toolCalls:i},usage:{in:e.usage.input_tokens,out:e.usage.output_tokens},raw:e}}if(e.type=="message"){const o=e.content[0];if(o.type=="text")return{type:"success",id:e.id,model:e.model,reason:Z(e.stop_reason),message:{role:e.role,content:o.text},usage:{in:e.usage.input_tokens,out:e.usage.output_tokens},raw:e}}}s(je,"translate$1");class Le{static{s(this,"OllamaProvider")}name="Ollama";url;model;constructor(t,o,n){this.model=t??"llama3",this.url=o??"http://localhost:11434"}createChatCompletionRequest(t){return new Ve(this.url,this.model,t)}}class Ve{static{s(this,"OllamaChatRequest")}chat;url;model;constructor(t,o,n){this.url=t,this.model=o,this.chat=n}async execute(){const t={model:this.model,messages:this.chat.toOpenAI().messages,stream:!1,options:{temperature:.7}};r.debug.log(t);let o;try{const n=await fetch(`${this.url}/api/chat`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const i=await n.json();o={type:"success",id:`ollama-${Date.now()}`,model:this.model,reason:p.Stop,message:{role:"assistant",content:i.message?.content||""},usage:{in:i.prompt_eval_count||0,out:i.eval_count||0},raw:i}}catch(n){console.log(n),o={type:"error",error:{type:"OllamaError",message:n.message||"Unexpected error from Ollama"},usage:{in:0,out:0},raw:JSON.stringify(n)}}return r.debug.log(o),o}}class We{static{s(this,"OpenAIProvider")}name="OpenAI";client;model;constructor(t,o,n){this.model=t,this.client=new ce({apiKey:o.providers.openai["api-key"]})}createChatCompletionRequest(t){return new Ge(this.client,this.model,t)}}class Ge{static{s(this,"OpenAIRequest")}chat;openai;model;constructor(t,o,n){this.openai=t,this.model=o||"gpt-4o",this.chat=n}async execute(){const t={model:this.model,...this.chat.toOpenAI()};r.debug.log(t);let o;try{const n=await this.openai.chat.completions.create(t);o=Ke(n)}catch(n){console.error(n),o={type:"error",error:{type:n.type??"Undetermined",message:n.message??"Unexpected error from OpenAI"},usage:{in:0,out:0},raw:n}}return r.debug.log(o),o}}function He(e){switch(e){case"length":return p.Length;case"stop":return p.Stop;case"tool_calls":return p.FunctionCall;default:return p.Error}}s(He,"getStopReason");function Ke(e){if(e.choices.length>0){const t=e.choices[0],o=t.message.tool_calls?.map(n=>({id:n.id,name:n.function.name,arguments:JSON.parse(n.function.arguments)}));return{type:"success",id:e.id,model:e.model,reason:He(t.finish_reason),message:{content:t.message.content??"",role:t.message.role,toolCalls:o},usage:{in:e.usage?.prompt_tokens??0,out:e.usage?.completion_tokens??0},raw:e}}return{type:"error",error:{type:"undetermined",message:"Unexpected response from OpenAI"},usage:{in:e.usage?.prompt_tokens??0,out:e.usage?.completion_tokens??0},raw:e}}s(Ke,"translate");function Xe(e,t,o){return e.engine=="openai"?new We(e.model,t,o):e.engine=="anthropic"?new Ue(e.model,t):e.engine=="ollama"?new Le(e.model,e.url,t):null}s(Xe,"getEngine");const ze={name:"brave",description:"Perform a search using the Brave search engine",parameters:{type:"object",properties:{searchTerm:{type:"string",description:"The search term to query"}},required:["searchTerm"]}};function Ye(e){if(e["api-key"]){const t=e["api-key"],o=e.delay;return{name:"braveSearch",schema:ze,fn:Qe(t,o)}}return r.debug.log("Brave search API key not found in config"),null}s(Ye,"getBraveSearch");function Qe(e,t=void 0){let o=0;return async n=>{const{searchTerm:i}=n;if(r.debug.group(`Brave: searching for ${i}`),t){for(;Date.now()-o<t;)await fe(t-(Date.now()-o));o=Date.now()}try{const a=e,c="https://api.search.brave.com/res/v1/web/search",u=new URL(c);u.searchParams.append("q",i),u.searchParams.append("format","json");const l=await fetch(u.toString(),{method:"GET",headers:{Accept:"application/json","X-Subscription-Token":a}});if(!l.ok)throw new Error(`HTTP error! status: ${l}`);return await l.json()}catch(a){throw console.error("Error fetching search results:",a),a}}}s(Qe,"createBraveSearch");function Ze(e,t){const o={},n={},i=Ye(e.tools.brave);return i&&(o.brave=i.fn,n.brave=i.schema),{tools:o,schemas:n,getSchemas:s(c=>{const u=[];for(const l of c)n[l]&&u.push(n[l]);return u},"getSchemas")}}s(Ze,"getTools");const et="ax.config",tt=["yaml","yml","json"];async function ot(e,t){const{content:o,format:n}=await L(e,{name:et,formats:tt},"Config File");let i=null;if(n==="json")i=JSON.parse(o);else if(n==="yaml"||n==="yml")i=q.parse(o);else throw new Error("Invalid config file format");if(r.debug.group("The Config Object"),r.debug.log(i),it(i))return i;throw new Error("The config file is not valid")}s(ot,"getConfig");function rt(e){return!e||typeof e!="object"?(r.debug.log("Provider: Not an object"),!1):!("api-key"in e)||typeof e["api-key"]!="string"?(r.debug.log("Provider: Missing or invalid 'api-key'"),!1):"model"in e&&typeof e.model!="string"?(r.debug.log("Provider: Invalid 'model' type"),!1):!0}s(rt,"isProvider");function ee(e){return!e||typeof e!="object"?(r.debug.log("ToolProvider: Not an object"),!1):!("api-key"in e)||typeof e["api-key"]!="string"?(r.debug.log("ToolProvider: Missing or invalid 'api-key'"),!1):!0}s(ee,"isToolProvider");function nt(e){return ee(e)?"delay"in e&&typeof e.delay!="number"?(r.debug.log("BraveProvider: Invalid 'delay' type"),!1):!0:!1}s(nt,"isBraveProvider");function it(e){if(!e||typeof e!="object")return r.debug.log("Config: Not an object"),!1;if(!("providers"in e)||typeof e.providers!="object")return r.debug.log("Config: Missing or invalid 'providers' property"),!1;if(Object.keys(e.providers).length===0)return r.debug.log("Config: 'providers' object is empty"),!1;if(!("tools"in e)||typeof e.tools!="object")return r.debug.log("Config: Missing or invalid 'tools' property"),!1;for(const[t,o]of Object.entries(e.providers))if(!rt(o))return r.debug.log(`Config: Invalid provider for key '${t}'`),!1;for(const[t,o]of Object.entries(e.tools))if(t==="brave"){if(!nt(o))return r.debug.log("Config: Invalid BraveProvider for key 'brave'"),!1}else if(!ee(o))return r.debug.log(`Config: Invalid ToolProvider for key '${t}'`),!1;return!0}s(it,"isConfig");const I=new ne().name("axle").description("A CLI tool for running AI jobs").version("1.0.0").option("--dry-run","Run the application without executing against the AI providers").option("-c, --config <path>","Path to the config file").option("-j, --job <path>","Path to the job file").option("--no-log","Do not write the output to a log file").option("-d, --debug","Print additional debug information").option("--args <args...>","Additional arguments in the form key=value");I.parse(process.argv);const h=I.opts(),S={};h.args&&h.args.forEach(e=>{const[t,o]=e.split("=");t&&o&&(S[t.trim()]=o.trim())}),r.setOptions(h),h.log&&await r.initWriter(),h.debug&&(r.debug?.group("Options"),r.debug?.log(h),r.debug?.log("Additional Arguments:"),r.debug?.log(S));let $,F;try{$=await ot(h.config??null,h),F=await ve(h.job??null,h)}catch(e){r.debug?.log(e.stack),console.error(`${e.stack}`),I.outputHelp(),process.exit(1)}const te=Ze($),_=Xe(F.using,$,h);_||(console.error("AI Provider is not valid. Please check your job file."),I.outputHelp(),process.exit(1)),r.info.group("All systems operational. Running job...");const st=Date.now();h.dryRun&&r.info.log("Dry run mode enabled. No API calls will be made.");const T={in:0,out:0};for(const[e,t]of Object.entries(F.jobs))r.info.group(`Executing "${e}"`),W(t)?await Pe(t,_,te,S,h,T):await Q(t,_,te,S,h,T);r.info.group("Usage"),r.info.log(`Total run time: ${Date.now()-st}ms`),r.info.log(`Input tokens: ${T.in} `),r.info.log(`Output tokens: ${T.out} `),r.info.group("Complete. Goodbye");
