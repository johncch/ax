#!/usr/bin/env node
var V=Object.defineProperty;var i=(e,t)=>V(e,"name",{value:t,configurable:!0});import{Command as G}from"@commander-js/extra-typings";import{glob as k}from"glob";import{readFile as y,writeFile as F,access as J,mkdir as N,appendFile as H}from"node:fs/promises";import{resolve as O,dirname as K}from"node:path";import b from"chalk";import X from"spinnies";import{randomUUID as $}from"node:crypto";import R from"yaml";import Y from"@anthropic-ai/sdk";import z from"openai";async function E(e,t,n="File"){let o=null,s="";if(e)try{s=O(e),o=await y(s,{encoding:"utf-8"})}catch{throw new Error(`${n} not found, see --help for details`)}else{for(const a of t.formats)try{s=O(t.name+"."+a),o=await y(s,{encoding:"utf-8"});break}catch{continue}if(o===null)throw new Error(`${n} not found, see --help for details`)}return{content:o,format:s.split(".").pop()??""}}i(E,"loadFile");function Q(e,t){e=e.replace("**/*","**");const n=/(?<asterisks>\*{1,2})(?<extension>\.[^\\/]+)?/,o=e.match(n);if(o){let s="";return o.groups?.asterisks.length==1?s+=t.fileNameStem:s+=t.directoryPath+t.fileNameStem,o.groups?.extension?s+=o.groups.extension:s+=t.fileExtension,e.replace(o[0],s)}return e}i(Q,"replaceFilePattern");function Z(e){const t=/(?<name>[^\\/]+)(?<extension>\.[^\\/]+)$/,n=e.match(t);return n&&n.length>0&&n.groups?{absolutePath:e,directoryPath:e.replace(n[0],""),fileExtension:n.groups.extension,fileNameStem:n.groups.name,fullFileName:n[0]}:null}i(Z,"pathToComponents");async function ee(e,t="."){try{return(await k(`${t}/${e}.*`)).length>0}catch{return!1}}i(ee,"fileExists");async function _(e){const t=K(e);try{await J(t)}catch{await N(t),await _(t)}}i(_,"ensureDirectoryExistence");async function te(e,t){await _(e),await F(e,t)}i(te,"writeFileWithDirectories");function x(e){return Array.isArray(e)?e:[e]}i(x,"arrayify");function m(e){return typeof e=="string"?e:JSON.stringify(e,null,2)}i(m,"stringify");function w(e){return e.slice(0,8)}i(w,"friendly");const I="./logs/";class ne{static{i(this,"Writer")}time;constructor(t){this.time=t}get filename(){return`${I}${this.time}.log`}async setup(){try{await J(I)}catch{await N(I)}await F(this.filename,`AXLE: New run at ${this.time}
`)}async write(t){t=`${new Date().toISOString()}> ${t}
`,await H(this.filename,t)}}class re{static{i(this,"Logger")}instanceId=new Date().toISOString();spinnies=new X({color:"white",succeedColor:"white"});opts={debug:!1};writer=null;async initWriter(){this.writer=new ne(new Date().toISOString()),await this.writer.setup()}setOptions(t){this.opts={debug:t.debug??!1}}get progress(){return{add:i((t,n)=>{this.spinnies.add(t,{text:n}),this.writer?.write(n)},"add"),update:i((t,n)=>{this.spinnies.update(t,{text:n}),this.writer?.write(n)},"update"),succeed:i((t,n)=>{this.spinnies.succeed(t,{text:n}),this.writer?.write(n)},"succeed"),fail:i((t,n)=>{this.spinnies.fail(t,{text:n}),this.writer?.write(n)},"fail")}}get info(){return{group(t){const n=m(t);console.log(`
${b.blue("==>")} ${b.whiteBright.bold(n)}`),this.writer?.write(n)},log:i(t=>{const n=m(t);console.log(m(t)),this.writer?.write(n)},"log")}}get debug(){const t=this.opts;return{group(n){const o=m(n);t.debug&&console.log(`
${b.gray("==>")} Debug: ${o}`),this.writer?.write(o)},log:i(n=>{const o=m(n);t.debug&&console.log(b.gray(o)),this.writer?.write(o)},"log")}}}const r=new re;var f=(e=>(e[e.Stop=0]="Stop",e[e.Length=1]="Length",e[e.FunctionCall=2]="FunctionCall",e[e.Error=3]="Error",e))(f||{});class oe{static{i(this,"Chat")}system;messages=[];addSystem(t){this.system=t}addUser(t){this.messages.push({role:"user",content:t})}addAssistant(t){this.messages.push({role:"assistant",content:t})}toOpenAI(){return[{role:"system",content:this.system},...this.messages]}toAnthropic(){return{system:this.system,messages:this.messages}}toString(){return JSON.stringify({system:this.system,messages:this.messages})}}async function D(e,t){try{const n=await y(t.name,"utf-8");e=e.replace(t.pattern,n)}catch(n){console.error(n)}return e}i(D,"fileReplacer");async function T(e,t){try{const n=x(t.name);let o="";for(const s of n){const a=await k(s);r.debug.log(`many-files parser. For glob "${s}", found ${a.length} files.`);const c=await Promise.all(a.map(async l=>{const u=await y(l,"utf-8");return l+`:
`+u}));o+=c.join(`
`)}e=e.replace(t.pattern,o)}catch(n){console.error(n)}return e}i(T,"manyFilesReplacer");async function ie(e){const{step:t,chat:n,provider:o,stats:s,variables:a,options:c}=e;let{content:l,system:u}=t;if(t.replace&&([l,u]=await se(t.replace,a,t.content,t.system)),u&&n.addSystem(u),n.addUser(l),c.dryRun)return r.debug.log(n),{action:"continue"};const d=await o.createChatCompletionRequest(n).execute();if(s.in+=d.usage.in,s.out+=d.usage.out,d.type=="success")switch(d.reason){case f.Stop:return d.message.content&&(n.addAssistant(d.message.content),a.input=d.message.content),{action:"continue"};case f.Length:return{action:"error",error:new Error("AXIS: Incomplete model output due to `max_tokens` parameter or token limit")};case f.FunctionCall:return{action:"error",error:new Error("Function call is currently not supported")}}return{action:"error",error:new Error("Failed to get response from AI provider")}}i(ie,"executeChatAction");async function se(e,t,n,o){for(const s of e)switch(s.source){case"file":n=await D(n,s),o&&(o=await D(o,s));break;case"many-files":n=await T(n,s),o&&(o=await T(o,s));break;default:n=n.replace(s.pattern,t[s.name]),o&&(o=o.replace(s.pattern,t[s.name]))}return[n,o]}i(se,"handleReplace");async function ae(e){const{action:t,variables:n,options:o}=e;if(o.dryRun){r.debug.log("Dry run: no action was taken");return}const s=t.output,a=n.input;if(typeof a=="string"){const c=Q(s,n.file);await te(c,a)}}i(ae,"execWriteToDisk");function ce(e){const{action:t,variables:n,options:o}=e;if(o.dryRun){r.debug.log("Dry run: no action was taken");return}const s=n.input;typeof s=="string"&&(n[t.name]=s)}i(ce,"execSaveToVariables");const le="ax.job",ue=["yaml","yml","json"];async function fe(e,t){const{content:n,format:o}=await E(e,{name:le,formats:ue},"Job File");let s=null;if(o==="json")s=JSON.parse(n);else if(o==="yaml"||o==="yml")s=R.parse(n);else throw new Error("Invalid job file format");if(r.debug?.group("The Job Object"),r.debug?.log(s),pe(s))return s;throw new Error("The job file is not valid")}i(fe,"getJob");function pe(e){if(typeof e!="object")return r.debug.log("JobConfig: Not an object"),!1;if(!ge(e.using))return r.debug.log("JobConfig: Invalid 'using' property"),!1;if(typeof e.jobs!="object")return r.debug.log("JobConfig: 'jobs' property is not an object"),!1;for(const t in e.jobs)if(!de(e.jobs[t]))return r.debug.log(`JobConfig: Invalid job at key '${t}'`),!1;return!0}i(pe,"isJobConfig");function ge(e){return typeof e!="object"?(r.debug.log("Using: Not an object"),!1):typeof e.engine!="string"||e.engine!=="openai"&&e.engine!=="anthropic"?(r.debug.log("Using: Invalid 'engine' property"),!1):e.model!==void 0&&typeof e.model!="string"?(r.debug.log("Using: Invalid 'model' property"),!1):!0}i(ge,"isUsing");function de(e){return typeof e!="object"?(r.debug.log("Job: Not an object"),!1):he(e)||j(e)?!0:(r.debug.log("Job: Neither AgentJob nor BatchJob"),!1)}i(de,"isJob");function he(e){if(typeof e!="object")return r.debug.log("AgentJob: Not an object"),!1;if(e.type!=="agent")return r.debug.log("AgentJob: Invalid 'type' property"),!1;if(!Array.isArray(e.steps))return r.debug.log("AgentJob: 'steps' is not an array"),!1;for(const t of e.steps)if(!U(t))return r.debug.log("AgentJob: Invalid step in 'steps' array"),!1;return!0}i(he,"isAgentJob");function ye(e){return typeof e!="object"?(r.debug.log("SkipOptions: Not an object"),!1):typeof e.folder!="string"?(r.debug.log("SkipOptions: Invalid 'folder' property"),!1):typeof e.contains!="string"?(r.debug.log("SkipOptions: Invalid 'contains' property"),!1):!0}i(ye,"isSkipOptions");function j(e){if(typeof e!="object")return r.debug.log("BatchJob: Not an object"),!1;if(e.type!=="batch")return r.debug.log("BatchJob: Invalid 'type' property"),!1;if(!Array.isArray(e.batch))return r.debug.log("BatchJob: 'batch' is not an array"),!1;for(const t of e.batch){if(typeof t!="object")return r.debug.log("BatchJob: Invalid batch item"),!1;if(t.type!=="files")return r.debug.log("BatchJob: Invalid batch item type"),!1;if(typeof t.input!="string")return r.debug.log("BatchJob: Invalid 'input' property in batch item"),!1;if(t["skip-condition"]!==void 0){if(!Array.isArray(t["skip-condition"]))return r.debug.log("BatchJob: 'skip-condition' is not an array"),!1;for(const n of t["skip-condition"])if(!ye(n))return r.debug.log("BatchJob: Invalid skip option in 'skip-condition'"),!1}}if(!Array.isArray(e.steps))return r.debug.log("BatchJob: 'steps' is not an array"),!1;for(const t of e.steps)if(!U(t))return r.debug.log("BatchJob: Invalid step in 'steps' array"),!1;return!0}i(j,"isBatchJob");function U(e){return typeof e!="object"?(r.debug.log("Step: Not an object"),!1):B(e)||L(e)||M(e)?!0:(r.debug.log("Step: Not a valid Step type"),!1)}i(U,"isStep");function B(e){if(typeof e!="object")return r.debug.log("ChatAction: Not an object"),!1;if(e.action!=="chat")return r.debug.log("ChatAction: Invalid 'action' property"),!1;if(e.system!==void 0&&typeof e.system!="string")return r.debug.log("ChatAction: Invalid 'system' property"),!1;if(typeof e.content!="string")return r.debug.log("ChatAction: Invalid 'content' property"),!1;if(e.replace!==void 0){if(!Array.isArray(e.replace))return r.debug.log("ChatAction: 'replace' is not an array"),!1;for(const t of e.replace)if(!me(t))return r.debug.log("ChatAction: Invalid replace in 'replace' array"),!1}return!0}i(B,"isChatAction");function L(e){return typeof e!="object"?(r.debug.log("WriteToDiskAction: Not an object"),!1):e.action!=="write-to-disk"?(r.debug.log("WriteToDiskAction: Invalid 'action' property"),!1):typeof e.output!="string"?(r.debug.log("WriteToDiskAction: Invalid 'output' property"),!1):!0}i(L,"isWriteToDiskAction");function M(e){return typeof e!="object"?(r.debug.log("SaveVarAction: Not an object"),!1):e.action!=="save-to-variables"?(r.debug.log("SaveVarAction: Invalid 'action' property"),!1):typeof e.name!="string"?(r.debug.log("SaveVarAction: Invalid 'name' property"),!1):!0}i(M,"isSaveVarAction");function me(e){return typeof e!="object"?(r.debug.log("Replace: Not an object"),!1):ve(e)||we(e)||be(e)?!0:(r.debug.log("Replace: Not a valid Replace type"),!1)}i(me,"isReplace");function be(e){return typeof e!="object"?(r.debug.log("ReplaceVariables: Not an object"),!1):typeof e.pattern!="string"?(r.debug.log("ReplaceVariables: Invalid 'pattern' property"),!1):e.source!==void 0&&e.source!=="variables"?(r.debug.log("ReplaceVariables: Invalid 'source' property"),!1):typeof e.name!="string"?(r.debug.log("ReplaceVariables: Invalid 'name' property"),!1):!0}i(be,"isReplaceVariables");function we(e){return typeof e!="object"?(r.debug.log("ReplaceFile: Not an object"),!1):typeof e.pattern!="string"?(r.debug.log("ReplaceFile: Invalid 'pattern' property"),!1):e.source!=="file"?(r.debug.log("ReplaceFile: Invalid 'source' property"),!1):typeof e.name!="string"?(r.debug.log("ReplaceFile: Invalid 'name' property"),!1):!0}i(we,"isReplaceFile");function ve(e){return typeof e!="object"?(r.debug.log("ReplaceManyFiles: Not an object"),!1):typeof e.pattern!="string"?(r.debug.log("ReplaceManyFiles: Invalid 'pattern' property"),!1):e.source!=="many-files"?(r.debug.log("ReplaceManyFiles: Invalid 'source' property"),!1):typeof e.name!="string"&&!Array.isArray(e.name)?(r.debug.log("ReplaceManyFiles: Invalid 'name' property"),!1):!0}i(ve,"isReplaceManyFiles");async function q(e,t,n={}){return new Ae(e,t,n)}i(q,"getAgentCommand");class Ae{static{i(this,"AgentJob")}type="agent";id;job;provider;variables;constructor(t,n,o={}){this.id=$(),this.job=t,this.provider=n,this.variables=o}async execute(t,n){const{job:o,provider:s}=this,{steps:a}=o;r.progress.add(this.id,`[${w(this.id)}] Starting job`);const c=new oe;let l=!1;for(const[u,g]of a.entries())if(r.progress.update(this.id,`[${w(this.id)}] Processing step ${u+1}: ${g.action}`),B(g)){const{action:d,error:h}=await ie({step:g,chat:c,provider:s,stats:n,variables:this.variables,options:t});h&&(l=!0,console.error(h))}else M(g)?ce({action:g,variables:this.variables,options:t}):L(g)&&await ae({action:g,variables:this.variables,options:t});l?r.progress.fail(this.id,`[${w(this.id)}] Failed`):r.progress.succeed(this.id,`[${w(this.id)}] complete`)}}async function ke(e,t,n){const o=new xe(e,t);return await o.setup(n),o}i(ke,"getBatchCommand");class xe{static{i(this,"BatchCommand")}id;job;provider;runs=[];constructor(t,n){this.id=$(),this.job=t,this.provider=n}async setup(t){if(!this.job.batch)throw new Error("Batch job is missing batch field");const n=x(this.job.batch);for(const o of n)if(o.type==="files"){const s=o.input,a=await k(s,{withFileTypes:!0});for(const c of a){const l=c.fullpath(),u=Z(l);if(!await Ie(o["skip-condition"],u)){const h={variables:{content:await y(l,"utf-8"),file:u},job:this.job};this.runs.push(h)}}}}async execute(t,n){const o=[],s=[];if(this.runs.length==0)return Promise.resolve("No runs to execute.").then(()=>{r.info.log("No runs to execute")});let a=0;r.progress.add(this.id,`Working on 0/${this.runs.length}`);for(let c=0;c<this.runs.length;c++){const l=this.runs[c],u=new Promise(async(g,d)=>{const h=await q(l.job,this.provider,l.variables);try{await h.execute(t,n),g()}catch(W){console.error(W),d()}finally{a+=1,r.progress.add(this.id,`Working on ${a}/${this.runs.length}`)}});o.push(u),s.push(u),s.length>=5&&(await Promise.all(s),s.length=0)}return Promise.all(o).then(()=>{r.progress.succeed(this.id,`All jobs (${this.runs.length}) completed`)})}}async function Ie(e,t){if(e){let n=x(e);for(const o of n)if(o.folder&&o.contains&&o.contains==="fileNameStem"&&t)return await ee(t.fileNameStem,o.folder)}return!1}i(Ie,"processSkipRules");class Ce{static{i(this,"AnthropicProvider")}name="Anthropic";client;model;constructor(t,n){this.model=t??"claude-3-5-sonnet-20240620",this.client=new Y({apiKey:n.providers.anthropic["api-key"]})}createChatCompletionRequest(t){return new Se(this.client,this.model,t)}}class Se{static{i(this,"AnthropicChatRequest")}chat;client;model;constructor(t,n,o){this.client=t,this.model=n,this.chat=o}async execute(){const t={model:this.model,...this.chat.toAnthropic(),max_tokens:Fe(this.model)};r.debug.log(t);let n;try{const o=await this.client.messages.create(t);n=Ne(o)}catch(o){n={type:"error",error:{type:o.type??"Undetermined",message:o.message??"Unexpected error from Anthropic"},usage:{in:0,out:0},raw:o}}return r.debug.log(n),n}}function Fe(e){switch(e){case"claude-3-5-sonnet-20240620":return 4096;case"claude-3-opus-20240229":return 4096;case"claude-3-sonnet-20240229":return 4096;case"claude-3-haiku-20240307":return 4096;default:return 4096}}i(Fe,"getMaxTokens");function Je(e){switch(e){case"max_tokens":return f.Length;case"end_turn":return f.Stop;case"stop_sequence":return f.Stop;case"tool_use":return f.FunctionCall;default:return f.Error}}i(Je,"getStopReason$1");function Ne(e){if(e.type=="message"){const t=e.content[0];if(t.type=="text"&&e.stop_reason)return{type:"success",id:e.id,model:e.model,reason:Je(e.stop_reason),message:{role:e.role,content:t.text},usage:{in:e.usage.input_tokens,out:e.usage.output_tokens},raw:e}}return{type:"error",error:{type:"undetermined",message:"Unexpected response from Anthropic"},usage:{in:e.usage.input_tokens,out:e.usage.output_tokens},raw:e}}i(Ne,"translate$1");class Oe{static{i(this,"OpenAIProvider")}name="OpenAI";client;model;constructor(t,n,o){this.model=t,this.client=new z({apiKey:n.providers.openai["api-key"]})}createChatCompletionRequest(t){return new $e(this.client,this.model,t)}}class $e{static{i(this,"OpenAIRequest")}chat;openai;model;constructor(t,n,o){this.openai=t,this.model=n||"gpt-4o",this.chat=o}async execute(){const t={model:this.model,messages:this.chat.toOpenAI()};r.debug.log(t);let n;try{const o=await this.openai.chat.completions.create(t);n=Ee(o)}catch(o){n={type:"error",error:{type:o.type??"Undetermined",message:o.message??"Unexpected error from OpenAI"},usage:{in:0,out:0},raw:o}}return r.debug.log(n),n}}function Re(e){switch(e){case"length":return f.Length;case"stop":return f.Stop;case"function_call":return f.FunctionCall;default:return f.Error}}i(Re,"getStopReason");function Ee(e){if(e.choices.length>0){const t=e.choices[0];return{type:"success",id:e.id,model:e.model,reason:Re(t.finish_reason),message:{content:t.message.content??"",role:t.message.role},usage:{in:e.usage?.prompt_tokens??0,out:e.usage?.completion_tokens??0},raw:e}}return{type:"error",error:{type:"undetermined",message:"Unexpected response from OpenAI"},usage:{in:e.usage?.prompt_tokens??0,out:e.usage?.completion_tokens??0},raw:e}}i(Ee,"translate");function _e(e,t,n){return e.engine=="openai"?new Oe(e.model,t,n):e.engine=="anthropic"?new Ce(e.model,t):null}i(_e,"getEngine");const De="ax.config",Te=["yaml","yml","json"];async function je(e,t){const{content:n,format:o}=await E(e,{name:De,formats:Te},"Config File");let s=null;if(o==="json")s=JSON.parse(n);else if(o==="yaml"||o==="yml")s=R.parse(n);else throw new Error("Invalid config file format");if(r.debug.group("The Config Object"),r.debug.log(s),Ue(s))return s;throw new Error("The config file is not valid")}i(je,"getConfig");function Ue(e){return e&&typeof e=="object"&&"providers"in e&&typeof e.providers=="object"&&Object.keys(e.providers).length>0&&Object.entries(e.providers).every(([t,n])=>typeof t=="string"&&n&&typeof n=="object"&&"api-key"in n&&typeof n["api-key"]=="string"&&(!("model"in n)||typeof n.model=="string"))}i(Ue,"isConfig");const v=new G().name("ax").description("A CLI tool for running AI jobs").version("1.0.0").option("--dry-run","Run the application without executing against the AI providers").option("-c, --config <path>","Path to the config file").option("-j, --job <path>","Path to the job file").option("--no-log","Do not write the output to a log file").option("-d, --debug","Print additional debug information");v.parse();const p=v.opts();r.setOptions(p),p.log&&await r.initWriter(),p.debug&&(r.debug?.group("Options"),r.debug?.log(p));let P,C;try{P=await je(p.config??null,p),C=await fe(p.job??null,p)}catch(e){r.debug?.log(e.stack),console.error(`${e.stack}`),v.outputHelp(),process.exit(1)}const S=_e(C.using,P,p);S||(console.error("AI Provider is not valid. Please check your job file."),v.outputHelp(),process.exit(1)),r.info.group("All systems operational. Running job...");const Be=Date.now();p.dryRun&&r.info.log("Dry run mode enabled. No API calls will be made.");const A={in:0,out:0};for(const[e,t]of Object.entries(C.jobs))r.info.group(`Executing "${e}"`),j(t)?await(await ke(t,S,p)).execute(p,A):await(await q(t,S)).execute(p,A);r.info.group("Usage"),r.info.log(`Total run time: ${Date.now()-Be}ms`),r.info.log(`Input tokens: ${A.in} `),r.info.log(`Output tokens: ${A.out} `),r.info.group("Complete. Goodbye");
