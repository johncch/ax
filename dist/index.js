var a=Object.defineProperty;var i=(s,e)=>a(s,"name",{value:e,configurable:!0});import{R as c,A as o,g as n,s as l}from"./serial-DkAUksps.js";import{I as b}from"./serial-DkAUksps.js";import"@anthropic-ai/sdk";import"openai";import"serialize-error";import"fs/promises";import"glob";import"node:fs/promises";import"node:path";class p{static{i(this,"Axle")}provider;stats={in:0,out:0};variables={};recorder=new c;constructor(e){if(Object.entries(e).length!==1)throw new o("Must have exactly one config");try{const r=Object.keys(e)[0],t=e[r];this.provider=n(r,t)}catch(r){throw r instanceof o?r:new o("Failed to initialize provider",{code:"PROVIDER_INIT_ERROR",cause:r instanceof Error?r:new Error(String(r))})}}async execute(...e){try{let r;return r=await l(...e).execute({provider:this.provider,variables:this.variables,stats:this.stats,recorder:this.recorder}),r}catch(r){const t=r instanceof o?r:new o("Execution failed",{cause:r instanceof Error?r:new Error(String(r))});return this.recorder.error?.log(t),{response:null,error:t,success:!1}}}get logs(){return this.recorder.getLogs()}}class u{static{i(this,"WriteOutputTask")}constructor(e){this.output=e}type}export{p as Axle,b as Instruct,u as WriteOutputTask};
