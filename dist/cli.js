#!/usr/bin/env node
var W=Object.defineProperty;var h=(e,s)=>W(e,"name",{value:s,configurable:!0});import{Command as B}from"@commander-js/extra-typings";import u from"chalk";import{b as A,p as J,T as f,f as M,e as O,L as m,R as U,c as H,d as G,a as X,g as q,i as K}from"./index-B1JxcSzh.js";import{glob as Q}from"glob";import{readFile as V,access as Y,mkdir as Z,writeFile as _,appendFile as tt}from"node:fs/promises";import D from"node:readline";import"yaml";import"@anthropic-ai/sdk";import"node:path";import"openai";async function et(e,s,o,t,a,r,i){const d=crypto.randomUUID(),c=[];if(!e.batch)throw new Error("Batch job is missing batch field");const b=A(e.batch);for(const g of b)if(g.type==="files"){const p=g.input,z=await Q(p,{withFileTypes:!0});for(const E of z){const T=E.fullpath(),C=J(T);if(!await st(g["skip-condition"],C)){const P={variables:{content:await V(T,"utf-8"),file:C},job:e};c.push(P)}}}if(c.length===0){i?.info.log("No runs to execute");return}let x=0;i.info.log({type:"task",status:f.Running,id:d,message:`Working on 0/${c.length}`});const L=h(async g=>{try{await O(g.job,s,o,{...g.variables,...t},a,r,i)}catch(p){console.error(p)}finally{x++,i.info.log({type:"task",status:f.Running,id:d,message:`Working on ${x}/${c.length}`})}},"executeRun"),j=5;for(let g=0;g<c.length;g+=j){const p=c.slice(g,g+j);await Promise.all(p.map(L))}i.info.log({type:"task",status:f.Success,id:d,message:`All jobs (${c.length}) completed`})}h(et,"executeBatchCommand");async function st(e,s){if(e){let o=A(e);for(const t of o)if(t.folder&&t.contains&&t.contains==="fileNameStem"&&s)return await M(s.fileNameStem,t.folder)}return!1}h(st,"processSkipRules");const it=["\u280B","\u2819","\u2839","\u2838","\u283C","\u2834","\u2826","\u2827","\u2807","\u280F"],k={success:"\u2713",fail:"\u2717",spinning:it};class nt{static{h(this,"ConsoleWriter")}tasks=new Map;entries=[];intervalId=null;spinnerInterval=80;lastRender="";isRendering=!1;startSpinner(){this.intervalId===null&&(this.intervalId=setInterval(()=>{this.tasks.size>0&&this.renderTasks()},this.spinnerInterval))}stopSpinner(){this.intervalId!==null&&(clearInterval(this.intervalId),this.intervalId=null)}renderTasks(){if(this.isRendering)return;if(this.isRendering=!0,this.lastRender){const t=this.lastRender.split(`
`).length;D.moveCursor(process.stdout,0,-t+1),D.clearScreenDown(process.stdout)}const s=[...this.tasks.values()].filter(t=>t.status===f.Success||t.status===f.Fail);for(const t of s){const{id:a,text:r,status:i}=t;i===f.Success?console.log(u.green(k.success),r):i===f.Fail&&console.log(u.red(k.fail),r),this.tasks.delete(a)}for(const t of this.entries)if(!F(t)){const{level:a,time:r,kind:i,message:d="",...c}=t,b=d;i==="heading"?ot(a,b,c):at(a,b,c)}this.entries=[];let o="";for(const t of this.tasks.values()){const a=u.cyan(k.spinning[t.frameIndex]);t.frameIndex=(t.frameIndex+1)%k.spinning.length,o+=`${a} ${t.text}
`}this.lastRender=o,process.stdout.write(o),this.isRendering=!1}handleEvent(s){if(F(s)){const{id:t,message:a,status:r}=s;if(r===f.Running)this.tasks.set(t,{id:t,text:a,status:r,frameIndex:0});else if((r===f.Success||r===f.Fail)&&this.tasks.has(t)){const i=this.tasks.get(t);i.status=r,i.text=a}return}else this.entries.push(s);this.renderTasks();const o=[...this.tasks.values()].some(t=>t.status===f.Running);o&&this.intervalId===null?this.startSpinner():!o&&this.intervalId!==null&&this.stopSpinner()}destroy(){this.stopSpinner()}}function F(e){return typeof e=="object"&&e!==null&&e.type==="task"}h(F,"isTask");function ot(e,s,o){const t=e>=m.Info?u.blue:u.gray,a=e>=m.Info?u.whiteBright.bold:u.white;console.log(`${t("==>")} ${a(s)}`);for(const[r,i]of Object.entries(o)){const d=JSON.stringify(i);console.log(`	${r}: ${d}`)}}h(ot,"heading");function at(e,s,o){const t=e>=m.Info?u.white:u.gray;s&&console.log(t(s));for(const[a,r]of Object.entries(o)){const i=JSON.stringify(r);console.log(t(`	${a}: ${i}`))}}h(at,"body");const I="./logs/";class rt{static{h(this,"LogWriter")}time;initialized=!1;constructor(){this.time=new Date().toISOString()}get filename(){return`${I}${this.time}.log`}async initialize(){try{await Y(I)}catch{await Z(I)}await _(this.filename,`AXLE: New run at ${this.time}
`),this.initialized=!0}async writeToLog(s){const{time:o,level:t,message:a,...r}=s;this.initialized||await this.initialize();const i=[];a&&typeof a=="string"&&i.push(a),Object.keys(r).length&&i.push(JSON.stringify(r));const d=`${m[t]} ${new Date(o).toISOString()} > ${i.join(" >> ")}
`;try{await tt(this.filename,d)}catch(c){console.error(`Failed to write to log file: ${c}`)}}async handleEvent(s){await this.writeToLog(s)}}const w=new B().name("axle").description("A CLI tool for running AI jobs").version("1.0.0").option("--dry-run","Run the application without executing against the AI providers").option("-c, --config <path>","Path to the config file").option("-j, --job <path>","Path to the job file").option("--no-log","Do not write the output to a log file").option("-d, --debug","Print additional debug information").option("--args <args...>","Additional arguments in the form key=value");w.parse(process.argv);const l=w.opts(),y={};l.args&&l.args.forEach(e=>{const[s,o]=e.split("=");s&&o&&(y[s.trim()]=o.trim())});const n=new U;l.debug&&(n.level=m.Debug);const lt=new nt;if(n.subscribe(lt),l.log){const e=new rt;await e.initialize(),n.subscribe(e)}l.debug&&(n.debug?.log({kind:"heading",message:"Options"}),n.debug?.log(l),n.debug?.log("Additional Arguments:"),n.debug?.log(y));let S,$;try{S=await H(l.config??null,l),$=await G(l.job??null,l,n)}catch(e){console.error(`${u.red(e.message)}`),console.error(e.stack),n.debug?.log(e.stack),console.log(""),w.outputHelp(),process.exit(1)}const N=X(S);let R;try{R=q($.using,S,l,n)}catch(e){console.error(`${u.red(e.message)}`),n.debug?.log(e.stack),console.log(""),w.outputHelp(),process.exit(1)}n.info.log({kind:"heading",message:"All systems operational. Running job..."});const ct=Date.now();l.dryRun&&n.info.log("Dry run mode enabled. No API calls will be made.");const v={in:0,out:0};for(const[e,s]of Object.entries($.jobs))n.info.log({kind:"heading",message:`Executing "${e}"`}),K(s)?await et(s,R,N,y,l,v,n):await O(s,R,N,y,l,v,n);n.info.log({kind:"heading",message:"Usage"}),n.info.log(`Total run time: ${Date.now()-ct}ms`),n.info.log(`Input tokens: ${v.in} `),n.info.log(`Output tokens: ${v.out} `),n.info.log({kind:"heading",message:"Complete. Goodbye"});
