#!/usr/bin/env node
var z=Object.defineProperty;var a=(e,t)=>z(e,"name",{value:t,configurable:!0});import{Command as G}from"@commander-js/extra-typings";import c from"chalk";import{l as C,i as H,T as p,L as k,c as X,a as Y,s as F,R as q,g as K,b as Q}from"./serial-r52_Pojp.js";import E from"yaml";import J from"node:readline";import{access as Z,mkdir as j,writeFile as V,appendFile as tt}from"node:fs/promises";import"@anthropic-ai/sdk";import"openai";import"fs/promises";import"glob";import"node:path";function et(e,t){if(!e||typeof e!="object")return t&&(t.value="Not an object"),!1;if(!st(e.using,t))return t&&(t.value=`Invalid 'using' property: ${t?.value}`),!1;if(!e.jobs||typeof e.jobs!="object")return t&&(t.value="Missing or invalid 'jobs' property"),!1;for(const[s,i]of Object.entries(e.jobs))if(!at(i,t))return t&&(t.value=`Invalid job '${s}': ${t?.value}`),!1;return!0}a(et,"isJobConfig");function st(e,t){return!e||typeof e!="object"?(t&&(t.value="Not an object"),!1):e.engine==="openai"?it(e,t):e.engine==="anthropic"?nt(e,t):e.engine==="ollama"?ot(e,t):(t&&(t.value="Invalid engine type. Must be 'openai', 'anthropic', or 'ollama'"),!1)}a(st,"isUsing");function it(e,t){return!e||typeof e!="object"?(t&&(t.value="Not an object"),!1):e.engine!=="openai"?(t&&(t.value="Engine must be 'openai'"),!1):e["api-key"]!==void 0&&typeof e["api-key"]!="string"?(t&&(t.value="Property 'api-key' must be a string"),!1):e.model!==void 0&&typeof e.model!="string"?(t&&(t.value="Property 'model' must be a string"),!1):!0}a(it,"isOpenAIUse");function nt(e,t){return!e||typeof e!="object"?(t&&(t.value="Not an object"),!1):e.engine!=="anthropic"?(t&&(t.value="Engine must be 'anthropic'"),!1):e["api-key"]!==void 0&&typeof e["api-key"]!="string"?(t&&(t.value="Property 'api-key' must be a string"),!1):e.model!==void 0&&typeof e.model!="string"?(t&&(t.value="Property 'model' must be a string"),!1):!0}a(nt,"isAnthropicUse");function ot(e,t){return!e||typeof e!="object"?(t&&(t.value="Not an object"),!1):e.engine!=="ollama"?(t&&(t.value="Engine must be 'ollama'"),!1):e.url!==void 0&&typeof e.url!="string"?(t&&(t.value="Property 'url' must be a string"),!1):e.model!==void 0&&typeof e.model!="string"?(t&&(t.value="Property 'model' must be a string"),!1):!0}a(ot,"isOllamaUse");function at(e,t){return!e||typeof e!="object"?(t&&(t.value="Not an object"),!1):e.type==="serial"?rt(e,t):e.type==="batch"?D(e,t):(t&&(t.value="Job type must be 'serial' or 'batch'"),!1)}a(at,"isJob");function rt(e,t){if(!e||typeof e!="object")return t&&(t.value="Not an object"),!1;if(e.type!=="serial")return t&&(t.value="Job type must be 'serial'"),!1;if(e.tools!==void 0){if(!Array.isArray(e.tools))return t&&(t.value="Property 'tools' must be an array"),!1;for(const s of e.tools)if(typeof s!="string")return t&&(t.value="All tools must be strings"),!1}if(!Array.isArray(e.steps))return t&&(t.value="Property 'steps' must be an array"),!1;for(let s=0;s<e.steps.length;s++)if(!U(e.steps[s],t))return t&&(t.value=`Invalid step at index ${s}: ${t?.value}`),!1;return!0}a(rt,"isSerialJob");function D(e,t){if(!e||typeof e!="object")return t&&(t.value="Not an object"),!1;if(e.type!=="batch")return t&&(t.value="Job type must be 'batch'"),!1;if(e.tools!==void 0){if(!Array.isArray(e.tools))return t&&(t.value="Property 'tools' must be an array"),!1;for(const s of e.tools)if(typeof s!="string")return t&&(t.value="All tools must be strings"),!1}if(!Array.isArray(e.batch))return t&&(t.value="Property 'batch' must be an array"),!1;for(let s=0;s<e.batch.length;s++){const i=e.batch[s];if(!i||typeof i!="object")return t&&(t.value=`Batch item at index ${s} must be an object`),!1;if(i.type!=="files")return t&&(t.value=`Batch item at index ${s} must have type 'files'`),!1;if(typeof i.source!="string")return t&&(t.value=`Batch item at index ${s} must have a string 'source' property`),!1;if(typeof i.bind!="string")return t&&(t.value=`Batch item at index ${s} must have a string 'bind' property`),!1;if(i["skip-if"]!==void 0){if(!Array.isArray(i["skip-if"]))return t&&(t.value=`Batch item at index ${s} must have an array 'skip-if' property`),!1;for(let n=0;n<i["skip-if"].length;n++)if(!ft(i["skip-if"][n],t))return t&&(t.value=`Invalid skip condition at index ${n} in batch item ${s}: ${t?.value}`),!1}}if(!Array.isArray(e.steps))return t&&(t.value="Property 'steps' must be an array"),!1;for(let s=0;s<e.steps.length;s++)if(!U(e.steps[s],t))return t&&(t.value=`Invalid step at index ${s}: ${t?.value}`),!1;return!0}a(D,"isBatchJob");function ft(e,t){return!e||typeof e!="object"?(t&&(t.value="Not an object"),!1):e.type!=="file-exist"?(t&&(t.value="Property 'type' must be 'file-exist'"),!1):typeof e.pattern!="string"?(t&&(t.value="Property 'pattern' must be a string"),!1):!0}a(ft,"isSkipOptions");function U(e,t){return!e||typeof e!="object"?(t&&(t.value="Not an object"),!1):!e.uses||typeof e.uses!="string"?(t&&(t.value="Step must have a string 'uses' property"),!1):e.uses==="chat"?ut(e,t):e.uses==="write-to-disk"?lt(e,t):(t&&(t.value=`Unknown uses type: ${e.uses}`),!1)}a(U,"isStep");function ut(e,t){if(!e||typeof e!="object")return t&&(t.value="Not an object"),!1;if(e.uses!=="chat")return t&&(t.value="Uses must be 'chat'"),!1;if(typeof e.message!="string")return t&&(t.value="Property 'message' must be a string"),!1;if(e.system!==void 0&&typeof e.system!="string")return t&&(t.value="Property 'system' must be a string"),!1;if(e.replace!==void 0){if(!Array.isArray(e.replace))return t&&(t.value="Property 'replace' must be an array"),!1;for(let s=0;s<e.replace.length;s++)if(!ct(e.replace[s],t))return t&&(t.value=`Invalid replace at index ${s}: ${t?.value}`),!1}if(e.tools!==void 0){if(!Array.isArray(e.tools))return t&&(t.value="Property 'tools' must be an array"),!1;for(const s of e.tools)if(typeof s!="string")return t&&(t.value="All tools must be strings"),!1}return!0}a(ut,"isChatStep");function lt(e,t){return!e||typeof e!="object"?(t&&(t.value="Not an object"),!1):e.uses!=="write-to-disk"?(t&&(t.value="Uses must be 'write-to-disk'"),!1):typeof e.output!="string"?(t&&(t.value="Property 'output' must be a string"),!1):!0}a(lt,"isWriteToDiskStep");function ct(e,t){if(!e||typeof e!="object")return t&&(t.value="Not an object"),!1;if(typeof e.pattern!="string")return t&&(t.value="Property 'pattern' must be a string"),!1;if(e.source!=="file")return t&&(t.value="Property 'source' must be 'file'"),!1;if(typeof e.files!="string"&&!Array.isArray(e.files))return t&&(t.value="Property 'files' must be a string or an array of strings"),!1;if(Array.isArray(e.files)){for(let s=0;s<e.files.length;s++)if(typeof e.files[s]!="string")return t&&(t.value=`Files entry at index ${s} must be a string`),!1}return!0}a(ct,"isReplace");const pt="ax.job",gt=["yaml","yml","json"];async function yt({path:e,options:t,recorder:s}){const{content:i,format:n}=await C({path:e,defaults:{name:pt,formats:gt},loader:"Job File"});let o=null;if(n==="json")o=JSON.parse(i);else if(n==="yaml"||n==="yml")o=E.parse(i);else throw new Error("Invalid job file format");s?.debug?.log({kind:"heading",message:"The Job Object"}),s?.debug?.log(o);const r={value:""};if(et(o,r))return o;throw new Error(`The job file is not valid: ${r.value}`)}a(yt,"getJobConfig");const dt="ax.config",mt=["yaml","yml","json"];async function ht({configPath:e,options:t,recorder:s}){const{content:i,format:n}=await C({path:e,defaults:{name:dt,formats:mt},loader:"Config File"});let o=null;if(n==="json")o=JSON.parse(i);else if(n==="yaml"||n==="yml")o=E.parse(i);else throw new Error("Invalid config file format");s?.debug?.log({kind:"heading",message:"The Config Object"}),s?.debug?.log(o);const r={value:""};if(H(o,r))return o;throw new Error(r.value)}a(ht,"getProviderConfig");const vt=["\u280B","\u2819","\u2839","\u2838","\u283C","\u2834","\u2826","\u2827","\u2807","\u280F"],b={success:"\u2713",fail:"\u2717",spinning:vt};class kt{static{a(this,"ConsoleWriter")}tasks=new Map;entries=[];truncate=0;intervalId=null;spinnerInterval=80;lastRender="";isRendering=!1;constructor(t){this.truncate=t.truncate??0}startSpinner(){this.intervalId===null&&(this.intervalId=setInterval(()=>{this.tasks.size>0&&this.renderTasks()},this.spinnerInterval))}stopSpinner(){this.intervalId!==null&&(clearInterval(this.intervalId),this.intervalId=null)}renderTasks(){if(this.isRendering)return;if(this.isRendering=!0,this.lastRender){const i=this.lastRender.split(`
`).length;J.moveCursor(process.stdout,0,-i+1),J.clearScreenDown(process.stdout)}const t=[...this.tasks.values()].filter(i=>i.status===p.Success||i.status===p.Fail);for(const i of t){const{id:n,text:o,status:r}=i;r===p.Success?console.log(c.green(b.success),o):r===p.Fail&&console.log(c.red(b.fail),o),this.tasks.delete(n)}for(const i of this.entries)if(!L(i)){const{level:n,time:o,kind:r,message:g="",...u}=i,y=g;r==="heading"?bt(n,y,u,{truncate:this.truncate}):wt(n,y,u,{truncate:this.truncate})}this.entries=[];let s="";for(const i of this.tasks.values()){const n=c.cyan(b.spinning[i.frameIndex]);i.frameIndex=(i.frameIndex+1)%b.spinning.length,s+=`${n} ${i.text}
`}this.lastRender=s,process.stdout.write(s),this.isRendering=!1}handleEvent(t){if(L(t)){const{id:i,message:n,status:o}=t;if(o===p.Running)this.tasks.set(i,{id:i,text:n,status:o,frameIndex:0});else if((o===p.Success||o===p.Fail)&&this.tasks.has(i)){const r=this.tasks.get(i);r.status=o,r.text=n}}else this.entries.push(t);this.renderTasks();const s=[...this.tasks.values()].some(i=>i.status===p.Running);s&&this.intervalId===null?this.startSpinner():!s&&this.intervalId!==null&&this.stopSpinner()}destroy(){this.stopSpinner()}}function L(e){return typeof e=="object"&&e!==null&&e.type==="task"}a(L,"isTask");function bt(e,t,s,i){const n=e>=k.Info?c.blue:c.gray,o=e>=k.Info?c.whiteBright.bold:c.white;console.log(`${n("==>")} ${o(t)}`),B(e,s,i)}a(bt,"heading");function wt(e,t,s,i){const n=e>=k.Info?c.white:c.gray;t&&console.log(n(t)),B(e,s,i)}a(wt,"body");function B(e,t,s){const i=e>=k.Info?c.white:c.gray;for(const[n,o]of Object.entries(t)){const r=s.truncate>0?JSON.stringify(o,(g,u)=>typeof u=="string"&&u.length>s.truncate?u.slice(0,s.truncate)+"<...>":u):JSON.stringify(o);console.log(i(`	${n}: ${r}`))}}a(B,"values");const P="./logs/";class At{static{a(this,"LogWriter")}time;initialized=!1;constructor(){this.time=new Date().toISOString()}get filename(){return`${P}${this.time}.log`}async initialize(){try{await Z(P)}catch{await j(P)}await V(this.filename,`AXLE: New run at ${this.time}
`),this.initialized=!0}async writeToLog(t){const{time:s,level:i,message:n,...o}=t;this.initialized||await this.initialize();const r=[];n&&typeof n=="string"&&r.push(n),Object.keys(o).length&&r.push(JSON.stringify(o));const g=`${k[i]} ${new Date(s).toISOString()} > ${r.join(" >> ")}
`;try{await tt(this.filename,g)}catch(u){console.error(`Failed to write to log file: ${u}`)}}async handleEvent(t){await this.writeToLog(t)}}const It=a((e,...t)=>{const s=a(async n=>{const{recorder:o}=n;let r=[],g=null;if("type"in e&&e.type==="batch"){const u=e;g=await X(u),r=await Y(u,{recorder:o})}else g=e,r=[...t];return[g,r]},"prepare");return{execute:a(async n=>{const{provider:o,variables:r,options:g,stats:u,recorder:y}=n,$=crypto.randomUUID(),[M,W]=await s({recorder:y}),m=await M.plan(W);if(y?.debug?.log({kind:"heading",message:"Runs",runs:m}),m.length===0){y?.info.log("No runs to execute");return}let R=0;y.info.log({type:"task",status:p.Running,id:$,message:`Working on 0/${m.length}`});const _=a(async d=>{let h;try{h=await F(...d.tasks).execute({provider:o,variables:{...d.variables,...r},options:g,stats:u,recorder:y})}catch(v){console.error(v),h={error:v}}finally{R++,y.info.log({type:"task",status:p.Running,id:$,message:`Working on ${R}/${m.length}`})}return h},"executeRun"),O=5;let x=[];for(let d=0;d<m.length;d+=O){const h=m.slice(d,d+O),v=await Promise.all(h.map(_));x=x.concat(v)}return y.info.log({type:"task",status:p.Success,id:$,message:`All jobs (${m.length}) completed`}),{response:x.map(d=>{const{stats:h,...v}=d;return v}),stats:u}},"execute")}},"concurrentWorkflow"),w=new G().name("axle").description("A CLI tool for running AI jobs").version("1.0.0").option("--dry-run","Run the application without executing against the AI providers").option("-c, --config <path>","Path to the config file").option("-j, --job <path>","Path to the job file").option("--no-log","Do not write the output to a log file").option("--no-warn-unused","Do not warn about unused variables").option("-d, --debug","Print additional debug information").option("--truncate <num>","Truncate printed strings to a certain number of characters, 0 to disable",parseInt,100).option("--args <args...>","Additional arguments in the form key=value");w.parse(process.argv);const l=w.opts(),A={};l.args&&l.args.forEach(e=>{const[t,s]=e.split("=");t&&s&&(A[t.trim()]=s.trim())});const f=new q;l.debug&&(f.level=k.Debug);const $t=new kt(l);if(f.subscribe($t),l.log){const e=new At;await e.initialize(),f.subscribe(e)}l.debug&&(f.debug?.log({kind:"heading",message:"Options"}),f.debug?.log(l),f.debug?.log("Additional Arguments:"),f.debug?.log(A));let S,T;try{S=await ht({configPath:l.config??null,options:l,recorder:f}),T=await yt({path:l.job??null,options:l,recorder:f})}catch(e){console.error(`${c.red(e.message)}`),console.error(e.stack),f.debug?.log(e.stack),console.log(""),w.outputHelp(),process.exit(1)}let N;try{N=K({useConfig:T.using,config:S,options:l,recorder:f})}catch(e){console.error(`${c.red(e.message)}`),f.debug?.log(e.stack),console.log(""),w.outputHelp(),process.exit(1)}Q().setConfig(S),f.info.log({kind:"heading",message:"All systems operational. Running job..."});const xt=Date.now();l.dryRun&&f.info.log("Dry run mode enabled. No API calls will be made.");const I={in:0,out:0};for(const[e,t]of Object.entries(T.jobs)){f.info.log({kind:"heading",message:`Executing "${e}"`});let s;D(t)?s=await It(t).execute({provider:N,variables:A,options:l,stats:I,recorder:f}):s=await F(t).execute({provider:N,variables:A,options:l,stats:I,recorder:f}),s&&f.info.log(s)}f.info.log({kind:"heading",message:"Usage"}),f.info.log(`Total run time: ${Date.now()-xt}ms`),f.info.log(`Input tokens: ${I.in} `),f.info.log(`Output tokens: ${I.out} `),f.info.log({kind:"heading",message:"Complete. Goodbye"});
