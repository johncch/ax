#!/usr/bin/env node
var q=Object.defineProperty;var l=(e,t)=>q(e,"name",{value:t,configurable:!0});import{Command as Q}from"@commander-js/extra-typings";import{l as D,T as g,L as d,c as J,s as L,A as $,a as U,i as Z,b as j,d as V,R as tt,g as et,e as it}from"./serial-DkAUksps.js";import B from"yaml";import c from"chalk";import M from"node:readline";import{access as st,mkdir as nt,writeFile as ot,appendFile as at}from"node:fs/promises";import"@anthropic-ai/sdk";import"openai";import"serialize-error";import"fs/promises";import"glob";import"node:path";function rt(e,t){if(!e||typeof e!="object")return t&&(t.value="Not an object"),!1;if(!lt(e.using,t))return t&&(t.value=`Invalid 'using' property: ${t?.value}`),!1;if(!e.jobs||typeof e.jobs!="object")return t&&(t.value="Missing or invalid 'jobs' property"),!1;for(const[i,s]of Object.entries(e.jobs))if(!ft(s,t))return t&&(t.value=`Invalid job '${i}': ${t?.value}`),!1;return!0}l(rt,"isJobConfig");function lt(e,t){if(!e||typeof e!="object")return t&&(t.value="Not an object"),!1;if(typeof e.engine!="string")return t&&(t.value="Missing or invalid 'engine' property"),!1;if(!["openai","anthropic","ollama"].includes(e.engine))return t&&(t.value="Invalid provider type. Must be 'openai', 'anthropic', or 'ollama'"),!1;switch(e.engine){case"ollama":if("model"in e&&typeof e.model!="string")return t&&(t.value="Property 'model' must be a string"),!1;if("url"in e&&typeof e.url!="string")return t&&(t.value="Property 'url' must be a string"),!1;break;case"anthropic":case"openai":if("api-key"in e&&typeof e["api-key"]!="string")return t&&(t.value="Property 'api-key' must be a string"),!1;if("model"in e&&typeof e.model!="string")return t&&(t.value="Property 'model' must be a string"),!1;break}return!0}l(lt,"isUsing");function ft(e,t){return!e||typeof e!="object"?(t&&(t.value="Not an object"),!1):e.type==="serial"?ut(e,t):e.type==="batch"?_(e,t):(t&&(t.value="Job type must be 'serial' or 'batch'"),!1)}l(ft,"isJob");function ut(e,t){if(!e||typeof e!="object")return t&&(t.value="Not an object"),!1;if(e.type!=="serial")return t&&(t.value="Job type must be 'serial'"),!1;if(e.tools!==void 0){if(!Array.isArray(e.tools))return t&&(t.value="Property 'tools' must be an array"),!1;for(const i of e.tools)if(typeof i!="string")return t&&(t.value="All tools must be strings"),!1}if(!Array.isArray(e.steps))return t&&(t.value="Property 'steps' must be an array"),!1;for(let i=0;i<e.steps.length;i++)if(!z(e.steps[i],t))return t&&(t.value=`Invalid step at index ${i}: ${t?.value}`),!1;return!0}l(ut,"isSerialJob");function _(e,t){if(!e||typeof e!="object")return t&&(t.value="Not an object"),!1;if(e.type!=="batch")return t&&(t.value="Job type must be 'batch'"),!1;if(e.tools!==void 0){if(!Array.isArray(e.tools))return t&&(t.value="Property 'tools' must be an array"),!1;for(const i of e.tools)if(typeof i!="string")return t&&(t.value="All tools must be strings"),!1}if(!Array.isArray(e.batch))return t&&(t.value="Property 'batch' must be an array"),!1;for(let i=0;i<e.batch.length;i++){const s=e.batch[i];if(!s||typeof s!="object")return t&&(t.value=`Batch item at index ${i} must be an object`),!1;if(s.type!=="files")return t&&(t.value=`Batch item at index ${i} must have type 'files'`),!1;if(typeof s.source!="string")return t&&(t.value=`Batch item at index ${i} must have a string 'source' property`),!1;if(typeof s.bind!="string")return t&&(t.value=`Batch item at index ${i} must have a string 'bind' property`),!1;if(s["skip-if"]!==void 0){if(!Array.isArray(s["skip-if"]))return t&&(t.value=`Batch item at index ${i} must have an array 'skip-if' property`),!1;for(let n=0;n<s["skip-if"].length;n++)if(!ct(s["skip-if"][n],t))return t&&(t.value=`Invalid skip condition at index ${n} in batch item ${i}: ${t?.value}`),!1}}if(!Array.isArray(e.steps))return t&&(t.value="Property 'steps' must be an array"),!1;for(let i=0;i<e.steps.length;i++)if(!z(e.steps[i],t))return t&&(t.value=`Invalid step at index ${i}: ${t?.value}`),!1;return!0}l(_,"isBatchJob");function ct(e,t){return!e||typeof e!="object"?(t&&(t.value="Not an object"),!1):e.type!=="file-exist"?(t&&(t.value="Property 'type' must be 'file-exist'"),!1):typeof e.pattern!="string"?(t&&(t.value="Property 'pattern' must be a string"),!1):!0}l(ct,"isSkipOptions");function z(e,t){return!e||typeof e!="object"?(t&&(t.value="Not an object"),!1):!e.uses||typeof e.uses!="string"?(t&&(t.value="Step must have a string 'uses' property"),!1):e.uses==="chat"?pt(e,t):e.uses==="write-to-disk"?gt(e,t):(t&&(t.value=`Unknown uses type: ${e.uses}`),!1)}l(z,"isStep");function pt(e,t){if(!e||typeof e!="object")return t&&(t.value="Not an object"),!1;if(e.uses!=="chat")return t&&(t.value="Uses must be 'chat'"),!1;if(typeof e.message!="string")return t&&(t.value="Property 'message' must be a string"),!1;if(e.system!==void 0&&typeof e.system!="string")return t&&(t.value="Property 'system' must be a string"),!1;if(e.replace!==void 0){if(!Array.isArray(e.replace))return t&&(t.value="Property 'replace' must be an array"),!1;for(let i=0;i<e.replace.length;i++)if(!yt(e.replace[i],t))return t&&(t.value=`Invalid replace at index ${i}: ${t?.value}`),!1}if(e.tools!==void 0){if(!Array.isArray(e.tools))return t&&(t.value="Property 'tools' must be an array"),!1;for(const i of e.tools)if(typeof i!="string")return t&&(t.value="All tools must be strings"),!1}return!0}l(pt,"isChatStep");function gt(e,t){return!e||typeof e!="object"?(t&&(t.value="Not an object"),!1):e.uses!=="write-to-disk"?(t&&(t.value="Uses must be 'write-to-disk'"),!1):typeof e.output!="string"?(t&&(t.value="Property 'output' must be a string"),!1):!0}l(gt,"isWriteToDiskStep");function yt(e,t){if(!e||typeof e!="object")return t&&(t.value="Not an object"),!1;if(typeof e.pattern!="string")return t&&(t.value="Property 'pattern' must be a string"),!1;if(e.source!=="file")return t&&(t.value="Property 'source' must be 'file'"),!1;if(typeof e.files!="string"&&!Array.isArray(e.files))return t&&(t.value="Property 'files' must be a string or an array of strings"),!1;if(Array.isArray(e.files)){for(let i=0;i<e.files.length;i++)if(typeof e.files[i]!="string")return t&&(t.value=`Files entry at index ${i} must be a string`),!1}return!0}l(yt,"isReplace");function dt(e,t){if(typeof e!="object"||e===null)return t&&(t.value="Config: must be a non-null object"),!1;if("openai"in e){const i=e.openai;if(typeof i!="object"||i===null)return t&&(t.value="Config: openai must be an object"),!1;if(typeof i["api-key"]!="string")return t&&(t.value="Config: openai.api-key must be a string"),!1;if("model"in i&&typeof i.model!="string")return t&&(t.value="Config: openai.model must be a string"),!1}if("anthropic"in e){const i=e.anthropic;if(typeof i!="object"||i===null)return t&&(t.value="Config: anthropic must be an object"),!1;if(typeof i["api-key"]!="string")return t&&(t.value="Config: anthropic.api-key must be a string"),!1;if("model"in i&&typeof i.model!="string")return t&&(t.value="Config: anthropic.model must be a string"),!1}if("ollama"in e){const i=e.ollama;if(typeof i!="object"||i===null)return t&&(t.value="Config: ollama must be an object"),!1;if("url"in i&&typeof i.url!="string")return t&&(t.value="Config: ollama.url must be a string"),!1;if("model"in i&&typeof i.model!="string")return t&&(t.value="Config: ollama.model must be a string"),!1}if("brave"in e){const i=e.brave;if(typeof i!="object"||i===null)return t&&(t.value="Config: brave must be an object"),!1;if(typeof i["api-key"]!="string")return t&&(t.value="Config: brave.api-key must be a string"),!1;if("rateLimit"in i&&typeof i.rateLimit!="number")return t&&(t.value="Config: brave.rateLimit must be a number"),!1}return!0}l(dt,"isServiceConfig");const mt="ax.job",ht=["yaml","yml","json"];async function vt({path:e,options:t,recorder:i}){const{content:s,format:n}=await D({path:e,defaults:{name:mt,formats:ht},loader:"Job File"});let o=null;if(n==="json")o=JSON.parse(s);else if(n==="yaml"||n==="yml")o=B.parse(s);else throw new Error("Invalid job file format");i?.debug?.heading.log("The Job Object"),i?.debug?.log(o);const r={value:""};if(rt(o,r))return o;throw new Error(`The job file is not valid: ${r.value}`)}l(vt,"getJobConfig");const bt="ax.config",wt=["yaml","yml","json"];async function kt({configPath:e,options:t,recorder:i}){const{content:s,format:n}=await D({path:e,defaults:{name:bt,formats:wt},loader:"Config File"});let o=null;if(n==="json")o=JSON.parse(s);else if(n==="yaml"||n==="yml")o=B.parse(s);else throw new Error("Invalid config file format");i?.debug?.heading.log("The Config Object"),i?.debug?.log(o);const r={value:""};if(dt(o,r))return o;throw new Error(r.value)}l(kt,"getServiceConfig");const xt=["\u280B","\u2819","\u2839","\u2838","\u283C","\u2834","\u2826","\u2827","\u2807","\u280F"],I={success:"\u2713",fail:"\u2717",spinning:xt};class At{static{l(this,"ConsoleWriter")}tasks=new Map;entries=[];truncate=0;intervalId=null;spinnerInterval=80;lastRender="";isRendering=!1;inline=!0;constructor(t){this.truncate=t.truncate??0,this.inline=t.inline??!0}startSpinner(){this.intervalId===null&&(this.intervalId=setInterval(()=>{this.tasks.size>0&&this.renderTasks()},this.spinnerInterval))}stopSpinner(){this.intervalId!==null&&(clearInterval(this.intervalId),this.intervalId=null)}renderTasks(){if(this.isRendering)return;if(this.isRendering=!0,this.inline&&this.lastRender){const s=this.lastRender.split(`
`).length;M.moveCursor(process.stdout,0,-s+1),M.clearScreenDown(process.stdout)}const t=[...this.tasks.values()].filter(s=>s.status===g.Success||s.status===g.Fail);for(const s of t){const{id:n,text:o,status:r}=s;r===g.Success?console.log(c.green(I.success),o):r===g.Fail&&console.log(c.red(I.fail),o),this.tasks.delete(n)}for(const s of this.entries){const{level:n,time:o,kind:r,payload:u}=s;r==="heading"?It(n,u,{truncate:this.truncate}):Ct(n,u,{truncate:this.truncate})}this.entries=[];let i="";for(const s of this.tasks.values()){const n=c.cyan(I.spinning[s.frameIndex]);s.frameIndex=(s.frameIndex+1)%I.spinning.length,i+=`${n} ${s.text}
`}this.lastRender=i,process.stdout.write(i),this.isRendering=!1}handleEvent(t){const{level:i,time:s,payload:n}=t;if(n.length>0&&$t(n[0])){const r=n[0],{id:u,message:f,status:p}=r;if(p===g.Running)this.tasks.set(u,{id:u,text:f,status:p,frameIndex:0});else if((p===g.Success||p===g.Fail)&&this.tasks.has(u)){const v=this.tasks.get(u);v.status=p,v.text=f}}else this.entries.push(t);this.renderTasks();const o=[...this.tasks.values()].some(r=>r.status===g.Running);o&&this.intervalId===null?this.startSpinner():!o&&this.intervalId!==null&&this.stopSpinner()}destroy(){this.stopSpinner()}}function $t(e){if(typeof e!="object"||e===null)return!1;const t=e;if(t.type!=="task"||typeof t.id!="string"||typeof t.message!="string")return!1;switch(t.status){case g.Running:case g.Success:case g.PartialSuccess:case g.Fail:return!0;default:return!1}}l($t,"isTask");function It(e,t,i){let s,n;e===d.Error?(s=c.red,n=c.redBright.bold):e===d.Warn?(s=c.yellow,n=c.yellowBright.bold):e>=d.Info?(s=c.blue,n=c.whiteBright.bold):(s=c.gray,n=c.white);const{message:o,data:r}=K(t);console.log(`${s("==>")} ${n(o)}`),H(e,r,i)}l(It,"heading");function Ct(e,t,i){let s;e===d.Error?s=c.red:e===d.Warn?s=c.yellow:e>=d.Info?s=c.white:s=c.gray;const{message:n,data:o}=K(t);n&&console.log(s(n)),H(e,o,i)}l(Ct,"body");const G="    ";function H(e,t,i){let s;e===d.Error?(s=c.red,i.truncate=0):e==d.Warn?s=c.yellow:e>=d.Info?s=c.white:s=c.gray,t.forEach(n=>{if(typeof n=="string"){console.log(s(`${G}${n}`));return}for(const[o,r]of Object.entries(n)){let u=JSON.stringify(r,Pt(i.truncate),"	");const f=`${o}: ${u}`.split(`
`).map(p=>G+p).join(`
`);console.log(s(f))}})}l(H,"values");function K(e){const[t,...i]=e;let s="",n=i;if(t){let{message:o,...r}=t;s=o&&typeof o=="string"?o:"",Object.keys(r).length>0&&(n=[r,...n])}return{message:s,data:n}}l(K,"toMsgData");function Pt(e){return e===0?null:(t,i)=>typeof i=="string"&&i.length>e?i.slice(0,e)+"<...>":i}l(Pt,"truncator");const R="./logs/";class St{static{l(this,"LogWriter")}time;initialized=!1;pendingWrites=[];constructor(){this.time=new Date().toISOString()}get filename(){return`${R}${this.time}.log`}async initialize(){try{await st(R)}catch{await nt(R)}const t=ot(this.filename,`AXLE: New run at ${this.time}
`);this.pendingWrites.push(t);try{await t,this.initialized=!0}finally{const i=this.pendingWrites.indexOf(t);i!==-1&&this.pendingWrites.splice(i,1)}}async writeToLog(t){const{time:i,level:s,payload:n}=t;this.initialized||await this.initialize();const o=n.map(f=>typeof f=="string"?f:JSON.stringify(f)),r=`${d[s]} ${new Date(i).toISOString()} > ${o.join(" >> ")}
`,u=at(this.filename,r).catch(f=>{console.error(`Failed to write to log file: ${f}`)});this.pendingWrites.push(u);try{await u}finally{const f=this.pendingWrites.indexOf(u);f!==-1&&this.pendingWrites.splice(f,1)}}async handleEvent(t){await this.writeToLog(t)}async flush(){this.pendingWrites.length>0&&await Promise.all(this.pendingWrites)}}const Et=l((e,...t)=>{const i=l(async n=>{const{recorder:o}=n;let r=[],u=null;if("type"in e&&e.type==="batch"){const f=e;u=await j(f),r=await V(f,{recorder:o})}else u=e,r=[...t];return[u,r]},"prepare");return{execute:l(async n=>{const{provider:o,variables:r,options:u,stats:f,recorder:p}=n,v=crypto.randomUUID();try{const[b,k]=await i({recorder:p}),w=await b.plan(k);if(p?.debug?.heading.log("Runs",w),w.length===0)return p?.info?.log("No runs to execute"),J([],f);let N=0;p?.info?.log({type:"task",status:g.Running,id:v,message:`Working on 0/${w.length}`});const X=l(async m=>{try{return await L(...m.tasks).execute({provider:o,variables:{...m.variables,...r},options:u,stats:f,recorder:p})}catch(h){const A=h instanceof $?h:new $("Error executing run",{cause:h instanceof Error?h:new Error(String(h))});return p?.error?.log(A),U(A,null,f)}finally{N++,p?.info?.log({type:"task",status:g.Running,id:v,message:`Working on ${N}/${w.length}`})}},"executeRun"),F=5;let x=[];for(let m=0;m<w.length;m+=F){const h=w.slice(m,m+F),A=await Promise.all(h.map(X));x=x.concat(A)}const W=x.some(Z);p?.info?.log({type:"task",status:W?g.PartialSuccess:g.Success,id:v,message:`All jobs (${w.length}) completed${W?" with some errors":""}`});const Y=x.map(m=>m.response);return J(Y,f)}catch(b){const k=b instanceof $?b:new $("Concurrent workflow execution failed",{id:v,cause:b instanceof Error?b:new Error(String(b))});return p?.error?.log(k),U(k,null,f)}},"execute")}},"concurrentWorkflow"),C=new Q().name("axle").description("A CLI tool for running AI jobs").version("1.0.0").option("--dry-run","Run the application without executing against the AI providers").option("-c, --config <path>","Path to the config file").option("-j, --job <path>","Path to the job file").option("--no-log","Do not write the output to a log file").option("--no-warn-unused","Do not warn about unused variables").option("--no-inline","Do not inline the console output").option("-d, --debug","Print additional debug information").option("--truncate <num>","Truncate printed strings to a certain number of characters, 0 to disable",parseInt,100).option("--args <args...>","Additional arguments in the form key=value");C.parse(process.argv);const y=C.opts(),P={};y.args&&y.args.forEach(e=>{const[t,i]=e.split("=");t&&i&&(P[t.trim()]=i.trim())}),process.on("uncaughtException",async e=>{console.error("Uncaught exception:"),console.error(e),a&&(a.error?.log("Uncaught exception:"),a.error?.log(e.message),a.error?.log(e.stack||""),await a.shutdown()),process.exit(1)});const a=new tt;y.debug&&(a.level=d.Debug);const Rt=new At(y);if(a.subscribe(Rt),y.log){const e=new St;await e.initialize(),a.subscribe(e)}y.debug&&(a.debug?.heading.log("Options"),a.debug?.log(y),a.debug?.heading.log("Additional Arguments:"),a.debug?.log(P));let S,T;try{S=await kt({configPath:y.config??null,options:y,recorder:a}),T=await vt({path:y.job??null,options:y,recorder:a})}catch(e){a.error.log(e.message),a.error.log(e.stack),await a.shutdown(),C.outputHelp(),process.exit(1)}let O;try{const{engine:e,...t}=T.using,i={...S[e],...t};O=et(e,S[e])}catch(e){a.error.log(e.message),a.error.log(e.stack),await a.shutdown(),C.outputHelp(),process.exit(1)}it().setConfig(S),a.info?.heading.log("All systems operational. Running job...");const Tt=Date.now();y.dryRun&&a.info?.log("Dry run mode enabled. No API calls will be made.");const E={in:0,out:0};for(const[e,t]of Object.entries(T.jobs)){a.info?.heading.log(`Executing "${e}"`);let i;_(t)?i=await Et(t).execute({provider:O,variables:P,options:y,stats:E,recorder:a}):i=await L(t).execute({provider:O,variables:P,options:y,stats:E,recorder:a}),i&&(a.info?.heading.log("Response"),a.info.log(i))}a.info?.heading.log("Usage"),a.info?.log(`Total run time: ${Date.now()-Tt}ms`),a.info?.log(`Input tokens: ${E.in} `),a.info?.log(`Output tokens: ${E.out} `),a.info?.heading.log("Complete. Goodbye"),await a.shutdown();
