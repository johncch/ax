#!/usr/bin/env node
var N=Object.defineProperty;var c=(t,n)=>N(t,"name",{value:n,configurable:!0});import{Command as T}from"@commander-js/extra-typings";import j from"chalk";import{b as v,p as E,D as o,f as O,e as x,c as B,d as U,a as W,g as F,i as H}from"./index-FWrDss_T.js";import{glob as J}from"glob";import{randomUUID as G}from"node:crypto";import{readFile as L}from"node:fs/promises";import"yaml";import"@anthropic-ai/sdk";import"node:path";import"openai";import"spinnies";async function M(t,n,a,r,C,$){const u=G(),s=[];if(!t.batch)throw new Error("Batch job is missing batch field");const D=v(t.batch);for(const i of D)if(i.type==="files"){const l=i.input,I=await J(l,{withFileTypes:!0});for(const R of I){const y=R.fullpath(),k=E(y);if(!await q(i["skip-condition"],k)){const S={variables:{content:await L(y,"utf-8"),file:k},job:t};s.push(S)}}}if(s.length===0){o.info.log("No runs to execute");return}let b=0;o.progress.add(u,`Working on 0/${s.length}`);const P=c(async i=>{try{await x(i.job,n,a,{...i.variables,...r},C,$)}catch(l){console.error(l)}finally{b++,o.progress.add(u,`Working on ${b}/${s.length}`)}},"executeRun"),w=5;for(let i=0;i<s.length;i+=w){const l=s.slice(i,i+w);await Promise.all(l.map(P))}o.progress.succeed(u,`All jobs (${s.length}) completed`)}c(M,"executeBatchCommand");async function q(t,n){if(t){let a=v(t);for(const r of a)if(r.folder&&r.contains&&r.contains==="fileNameStem"&&n)return await O(n.fileNameStem,r.folder)}return!1}c(q,"processSkipRules");const g=new T().name("axle").description("A CLI tool for running AI jobs").version("1.0.0").option("--dry-run","Run the application without executing against the AI providers").option("-c, --config <path>","Path to the config file").option("-j, --job <path>","Path to the job file").option("--no-log","Do not write the output to a log file").option("-d, --debug","Print additional debug information").option("--args <args...>","Additional arguments in the form key=value");g.parse(process.argv);const e=g.opts(),p={};e.args&&e.args.forEach(t=>{const[n,a]=t.split("=");n&&a&&(p[n.trim()]=a.trim())}),o.setOptions(e),e.log&&await o.initWriter(),e.debug&&(o.debug?.group("Options"),o.debug?.log(e),o.debug?.log("Additional Arguments:"),o.debug?.log(p));let m,d;try{m=await B(e.config??null,e),d=await U(e.job??null,e)}catch(t){console.error(`${j.red(t.message)}`),o.debug?.log(t.stack),console.log(""),g.outputHelp(),process.exit(1)}const A=W(m);let h;try{h=F(d.using,m,e)}catch(t){console.error(`${j.red(t.message)}`),o.debug?.log(t.stack),console.log(""),g.outputHelp(),process.exit(1)}o.info.group("All systems operational. Running job...");const z=Date.now();e.dryRun&&o.info.log("Dry run mode enabled. No API calls will be made.");const f={in:0,out:0};for(const[t,n]of Object.entries(d.jobs))o.info.group(`Executing "${t}"`),H(n)?await M(n,h,A,p,e,f):await x(n,h,A,p,e,f);o.info.group("Usage"),o.info.log(`Total run time: ${Date.now()-z}ms`),o.info.log(`Input tokens: ${f.in} `),o.info.log(`Output tokens: ${f.out} `),o.info.group("Complete. Goodbye");
